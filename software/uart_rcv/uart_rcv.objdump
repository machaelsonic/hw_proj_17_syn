
uart_rcv.elf:     file format elf32-littlenios2
uart_rcv.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00020140

Program Header:
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x00020020 align 2**12
         filesz 0x00004090 memsz 0x00004360 flags rwx
    LOAD off    0x00006000 vaddr 0x00041000 paddr 0x00041000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000000  00041000  00041000  00006000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000120  00020020  00020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00002758  00020140  00020140  00001140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000004c  00022898  00022898  00003898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000017cc  000228e4  000228e4  000038e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002d0  000240b0  000240b0  000050b0  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00006000  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000005d0  00000000  00000000  00006028  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00000b8c  00000000  00000000  000065f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00009dbe  00000000  00000000  00007184  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000032c6  00000000  00000000  00010f42  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00007ed9  00000000  00000000  00014208  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000009e0  00000000  00000000  0001c0e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001bf7  00000000  00000000  0001cac4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000022e7  00000000  00000000  0001e6bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  000209a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000268  00000000  00000000  000209c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00022bfb  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00022bfe  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00022c01  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00022c02  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00022c03  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00022c07  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00022c0b  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  00022c0f  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  00022c18  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  00022c21  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000005  00000000  00000000  00022c2a  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000002d  00000000  00000000  00022c2f  2**0
                  CONTENTS, READONLY
 29 .jdi          00004313  00000000  00000000  00022c5c  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00054962  00000000  00000000  00026f6f  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00041000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
00020140 l    d  .text	00000000 .text
00022898 l    d  .rodata	00000000 .rodata
000228e4 l    d  .rwdata	00000000 .rwdata
000240b0 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00020184 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 uart_rcv.c
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
000205e0 l     F .text	0000000c alt_dev_reg
000228e4 l     O .rwdata	000000c8 epcs_flash_controller_0
000229ac l     O .rwdata	00001060 jtag_uart
00023a0c l     O .rwdata	000000c4 uart
00000000 l    df *ABS*	00000000 altera_avalon_epcs_flash_controller.c
000206a4 l     F .text	00000034 alt_epcs_test_address
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00020c20 l     F .text	0000004c altera_avalon_jtag_uart_timeout
00020cec l     F .text	000000ec altera_avalon_jtag_uart_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
00021174 l     F .text	0000012c altera_avalon_uart_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00000000 l    df *ABS*	00000000 epcs_commands.c
0002407c l     O .rwdata	00000004 C.3.1479
00021714 l     F .text	00000030 epcs_await_wip_released
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
00021ae4 l     F .text	00000020 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00021b9c l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_flash_dev.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00021dfc l     F .text	00000070 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
00023c78 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
000226cc l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
00020670 g     F .text	00000034 alt_epcs_flash_get_info
00020580 g     F .text	00000060 alt_main
000240f0 g     O .bss	00000100 alt_irq
00000000  w      *UND*	00000000 __errno
0002198c g     F .text	000000c8 epcs_sector_erase
000240b0 g     O .bss	00000001 RxStart
00041000 g     F .entry	00000000 __reset
000240ec g     O .bss	00000004 errno
000240dc g     O .bss	00000004 alt_argv
0002c078 g       *ABS*	00000000 _gp
00023af8 g     O .rwdata	00000180 alt_fd_list
000240b4 g     O .bss	00000004 send_data_l
0002186c g     F .text	00000050 epcs_write_status_register
0002225c g     F .text	00000070 alt_find_dev
00022484 g     F .text	000000a0 memcpy
00021e6c g     F .text	0000008c alt_io_redirect
00022898 g       *ABS*	00000000 __DTOR_END__
00020754 g     F .text	000000b8 alt_epcs_flash_write_block
00020e54 g     F .text	00000158 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00020254 g     F .text	000001b8 uart_rx_tx_isr
00024090 g     O .rwdata	00000004 alt_max_fd
000240b8 g     O .bss	00000001 rcv_data_h
000204e0 g     F .text	000000a0 alt_irq_register
0002080c g     F .text	00000054 alt_epcs_flash_erase_block
000240ac g     O .rwdata	00000004 _global_impure_ptr
00021634 g     F .text	0000004c epcs_exit_4_bytes_mode
00024380 g       *ABS*	00000000 __bss_end
00021d90 g     F .text	0000006c alt_iic_isr_register
000220c4 g     F .text	000000ac alt_tick
000212a0 g     F .text	00000040 altera_avalon_uart_init
00021cf4 g     F .text	00000018 alt_ic_irq_enabled
00022090 g     F .text	00000034 alt_alarm_stop
000240d4 g     O .bss	00000004 alt_irq_active
000200ec g     F .exceptions	00000054 alt_irq_handler
00023ad0 g     O .rwdata	00000028 alt_dev_null
000240b9 g     O .bss	00000001 RxPtr
00024088 g     O .rwdata	00000008 alt_dev_list
0002157c g     F .text	00000080 epcs_read_electronic_signature
00024380 g       *ABS*	00000000 end
00021414 g     F .text	00000104 altera_avalon_uart_write
00020c6c g     F .text	00000080 altera_avalon_jtag_uart_init
000240ba g     O .bss	00000001 i
00022894 g       *ABS*	00000000 __CTOR_LIST__
00034000 g       *ABS*	00000000 __alt_stack_pointer
00021128 g     F .text	00000010 altera_avalon_uart_write_fd
00021118 g     F .text	00000010 altera_avalon_uart_close_fd
00020fac g     F .text	0000016c altera_avalon_jtag_uart_write
00020188 g     F .text	00000020 uart_init
000226d0 g     F .text	000001b0 __call_exitprocs
00020140 g     F .text	00000048 _start
000240e4 g     O .bss	00000004 _alt_tick_rate
000240bb g     O .bss	00000001 send_ptr
00022178 g     F .text	000000e4 alt_avalon_spi_command
000240e8 g     O .bss	00000004 _alt_nticks
000205ec g     F .text	00000064 alt_sys_init
00022598 g     F .text	00000134 __register_exitproc
00020be8 g     F .text	00000038 altera_avalon_jtag_uart_close
000216cc g     F .text	00000048 epcs_read_status_register
00020bd8 g     F .text	00000010 altera_avalon_jtag_uart_read_fd
00022368 g     F .text	0000005c alt_get_fd
00021518 g     F .text	00000064 epcs_read_device_id
00022410 g     F .text	00000074 memcmp
00020bb8 g     F .text	00000010 altera_avalon_jtag_uart_close_fd
00024380 g       *ABS*	00000000 __alt_stack_base
00020bac g     F .text	0000000c altera_avalon_jtag_uart_ioctl_fd
00041000 g       *ABS*	00000000 __alt_mem_epcs_flash_controller_0
000222cc g     F .text	0000009c alt_find_file
00021ba4 g     F .text	00000070 alt_dev_llist_insert
00024098 g     O .rwdata	00000008 alt_flash_dev_list
000240bc g     O .bss	00000005 ReceBuf
000240b0 g       *ABS*	00000000 __bss_start
000201a8 g     F .text	000000ac main
00020000 g       *ABS*	00000000 __alt_mem_RAM
000240e0 g     O .bss	00000004 alt_envp
00020bc8 g     F .text	00000010 altera_avalon_jtag_uart_write_fd
000241f0 g     O .bss	00000190 _atexit0
00024094 g     O .rwdata	00000004 alt_errno
000240c4 g     O .bss	00000004 rcv_data_l
000240c8 g     O .bss	00000001 tempRece
000240c9 g     O .bss	00000005 SendBuf
00022898 g       *ABS*	00000000 __CTOR_END__
00020860 g     F .text	000001b0 alt_epcs_flash_write
00022898 g       *ABS*	00000000 __DTOR_LIST__
00020650 g     F .text	00000020 alt_irq_init
0002206c g     F .text	00000024 alt_release_fd
000223c4 g     F .text	00000014 atexit
000240a8 g     O .rwdata	00000004 _impure_ptr
000240d8 g     O .bss	00000004 alt_argc
00021c54 g     F .text	00000040 _do_dtors
00020020 g       .exceptions	00000000 alt_irq_entry
00024080 g     O .rwdata	00000008 alt_fs_list
000218bc g     F .text	000000d0 epcs_read_buffer
00020a10 g     F .text	0000019c alt_epcs_flash_init
00021d8c g     F .text	00000004 alt_ic_isr_register
000240b0 g       *ABS*	00000000 _edata
00021138 g     F .text	00000010 altera_avalon_uart_read_fd
00024380 g       *ABS*	00000000 _end
00021ca8 g     F .text	0000004c alt_flash_open_dev
00020dd8 g     F .text	0000007c altera_avalon_jtag_uart_ioctl
00021d4c g     F .text	00000040 alt_ic_irq_disable
00021680 g     F .text	0000004c epcs_enter_4_bytes_mode
00022170 g     F .text	00000008 altera_nios2_qsys_irq_init
000223d8 g     F .text	00000038 exit
00021c94 g     F .text	00000014 alt_flash_close_dev
00034000 g       *ABS*	00000000 __alt_data_end
00020020 g     F .exceptions	00000000 alt_exception
00021148 g     F .text	0000002c altera_avalon_uart_close
00022880 g     F .text	00000014 _exit
00021a54 g     F .text	00000090 alt_alarm_start
0002040c g     F .text	000000d4 data_rcv_isr
00022524 g     F .text	00000074 strlen
000215fc g     F .text	00000038 epcs_write_enable
00021ef8 g     F .text	00000174 open
000240ce g     O .bss	00000001 send_data_h
00024078 g     O .rwdata	00000004 alt_priority_mask
00021d0c g     F .text	00000040 alt_ic_irq_enable
000212e0 g     F .text	00000134 altera_avalon_uart_read
000206d8 g     F .text	0000007c alt_epcs_flash_read
000240a0 g     O .rwdata	00000008 alt_alarm_list
00021c14 g     F .text	00000040 _do_ctors
00021b04 g     F .text	00000098 close
000240cf g     O .bss	00000001 wr_flag
000240d0 g     O .bss	00000001 master
00000000  w      *UND*	00000000 free
00021744 g     F .text	00000128 epcs_write_buffer



Disassembly of section .exceptions:

00020020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
   20020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
   20024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
   20028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   2002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   20030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   20034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   20038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   2003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   20040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
   20044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
   20048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   2004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   20050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   20054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   20058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   2005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   20060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   20064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   20068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   2006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   20070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   20074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   20078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   2007c:	10000326 	beq	r2,zero,2008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   20080:	20000226 	beq	r4,zero,2008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   20084:	00200ec0 	call	200ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   20088:	00000306 	br	20098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   2008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   20090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   20094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   20098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   2009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   200a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   200a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   200a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   200ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   200b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   200b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   200b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   200bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   200c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
   200c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   200c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   200cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   200d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   200d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   200d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   200dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   200e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
   200e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   200e8:	ef80083a 	eret

000200ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   200ec:	deffff04 	addi	sp,sp,-4
   200f0:	dfc00015 	stw	ra,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   200f4:	0009313a 	rdctl	r4,ipending
   200f8:	00c00044 	movi	r3,1
   200fc:	014000b4 	movhi	r5,2
   20100:	29503c04 	addi	r5,r5,16624
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   20104:	20c4703a 	and	r2,r4,r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   20108:	18c7883a 	add	r3,r3,r3
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   2010c:	10000726 	beq	r2,zero,2012c <alt_irq_handler+0x40>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   20110:	29000117 	ldw	r4,4(r5)
   20114:	28800017 	ldw	r2,0(r5)
   20118:	103ee83a 	callr	r2
   2011c:	0005313a 	rdctl	r2,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
   20120:	10000426 	beq	r2,zero,20134 <alt_irq_handler+0x48>
   20124:	1009883a 	mov	r4,r2
   20128:	003ff306 	br	200f8 <alt_irq_handler+0xc>
   2012c:	29400204 	addi	r5,r5,8
   20130:	003ff406 	br	20104 <alt_irq_handler+0x18>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   20134:	dfc00017 	ldw	ra,0(sp)
   20138:	dec00104 	addi	sp,sp,4
   2013c:	f800283a 	ret

Disassembly of section .text:

00020140 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   20140:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
   20144:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   20148:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   2014c:	00bffd16 	blt	zero,r2,20144 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   20150:	06c000f4 	movhi	sp,3
    ori sp, sp, %lo(__alt_stack_pointer)
   20154:	ded00014 	ori	sp,sp,16384

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
   20158:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
   2015c:	d6b01e14 	ori	gp,gp,49272
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   20160:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
   20164:	10902c14 	ori	r2,r2,16560

    movhi r3, %hi(__bss_end)
   20168:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
   2016c:	18d0e014 	ori	r3,r3,17280

    beq r2, r3, 1f
   20170:	10c00326 	beq	r2,r3,20180 <_start+0x40>

0:
    stw zero, (r2)
   20174:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   20178:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   2017c:	10fffd36 	bltu	r2,r3,20174 <_start+0x34>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   20180:	00205800 	call	20580 <alt_main>

00020184 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   20184:	003fff06 	br	20184 <alt_after_alt_main>

00020188 <uart_init>:

//////////////////////////uart inithilization///////////////////////////////////////////////
void uart_init(void)
 {

  IOWR_ALTERA_AVALON_UART_CONTROL(UART_BASE, 0X00C0);// enalbe interruption of  txd and rxd
   20188:	00803004 	movi	r2,192
   2018c:	00c00134 	movhi	r3,4
   20190:	18c80304 	addi	r3,r3,8204
   20194:	18800035 	stwio	r2,0(r3)
  IOWR_ALTERA_AVALON_UART_STATUS(UART_BASE, 0X0000);
   20198:	00800134 	movhi	r2,4
   2019c:	10880204 	addi	r2,r2,8200
   201a0:	10000035 	stwio	zero,0(r2)

 }
   201a4:	f800283a 	ret

000201a8 <main>:
int main (void)
{

	int uart_iq_capture,pio_iq_capture;

 send_ptr=0;
   201a8:	d02010c5 	stb	zero,-32701(gp)
 wr_flag=0;
   201ac:	d02015c5 	stb	zero,-32681(gp)
   }
}


int main (void)
{
   201b0:	defffc04 	addi	sp,sp,-16

	int uart_iq_capture,pio_iq_capture;

 send_ptr=0;
 wr_flag=0;
 RxPtr=0;
   201b4:	d0201045 	stb	zero,-32703(gp)
 RxStart=0;
 master=0;
  alt_irq_register(PRE_COME_IRQ, (void*)&pio_iq_capture, data_rcv_isr);
   201b8:	d80b883a 	mov	r5,sp
	int uart_iq_capture,pio_iq_capture;

 send_ptr=0;
 wr_flag=0;
 RxPtr=0;
 RxStart=0;
   201bc:	d0200e05 	stb	zero,-32712(gp)
 master=0;
  alt_irq_register(PRE_COME_IRQ, (void*)&pio_iq_capture, data_rcv_isr);
   201c0:	01000084 	movi	r4,2
   201c4:	018000b4 	movhi	r6,2
   201c8:	31810304 	addi	r6,r6,1036
   }
}


int main (void)
{
   201cc:	dfc00315 	stw	ra,12(sp)
   201d0:	dc000215 	stw	r16,8(sp)

 send_ptr=0;
 wr_flag=0;
 RxPtr=0;
 RxStart=0;
 master=0;
   201d4:	d0201605 	stb	zero,-32680(gp)
  alt_irq_register(PRE_COME_IRQ, (void*)&pio_iq_capture, data_rcv_isr);
   201d8:	00204e00 	call	204e0 <alt_irq_register>

  //IOWR_ALTERA_AVALON_PIO_DATA(DATA_CLR_BASE,0x00);

 alt_irq_register(UART_IRQ, (void*)&uart_iq_capture, uart_rx_tx_isr);
   201dc:	010000c4 	movi	r4,3
   201e0:	d9400104 	addi	r5,sp,4
   201e4:	018000b4 	movhi	r6,2
   201e8:	31809504 	addi	r6,r6,596
   201ec:	00204e00 	call	204e0 <alt_irq_register>

 IOWR_ALTERA_AVALON_PIO_IRQ_MASK(PRE_COME_BASE,0xFF);
   201f0:	04003fc4 	movi	r16,255
   201f4:	00800134 	movhi	r2,4
   201f8:	10881604 	addi	r2,r2,8280
   201fc:	14000035 	stwio	r16,0(r2)
 IOWR_ALTERA_AVALON_PIO_EDGE_CAP(PRE_COME_BASE,0x00);
   20200:	10800104 	addi	r2,r2,4
   20204:	10000035 	stwio	zero,0(r2)
 uart_init();
   20208:	00201880 	call	20188 <uart_init>
   2020c:	01c00134 	movhi	r7,4
   20210:	39c81004 	addi	r7,r7,8256
   20214:	01800134 	movhi	r6,4
   20218:	31880c04 	addi	r6,r6,8240
   2021c:	00c00134 	movhi	r3,4
   20220:	18c80804 	addi	r3,r3,8224
   20224:	01400044 	movi	r5,1
   20228:	01000134 	movhi	r4,4
   2022c:	21080104 	addi	r4,r4,8196

while(1)
 {
	                IOWR_ALTERA_AVALON_PIO_DATA(TX_DATA_L_BASE,rcv_data_l);
   20230:	d0a01317 	ldw	r2,-32692(gp)
   20234:	38800035 	stwio	r2,0(r7)
					IOWR_ALTERA_AVALON_PIO_DATA(TX_DATA_H_BASE,rcv_data_h);
   20238:	d0a01003 	ldbu	r2,-32704(gp)
   2023c:	10803fcc 	andi	r2,r2,255
   20240:	30800035 	stwio	r2,0(r6)
					IOWR_ALTERA_AVALON_PIO_DATA(TX_DATA_VALID_BASE,0x01);
   20244:	19400035 	stwio	r5,0(r3)
					IOWR_ALTERA_AVALON_PIO_DATA(TX_DATA_VALID_BASE,0x00);
   20248:	18000035 	stwio	zero,0(r3)


					IOWR_ALTERA_AVALON_UART_TXDATA(UART_BASE, 0xFF);
   2024c:	24000035 	stwio	r16,0(r4)
   20250:	003ff706 	br	20230 <main+0x88>

00020254 <uart_rx_tx_isr>:

////////////////////////////uart receive data //////////////////////////////
void uart_rx_tx_isr (void* context,alt_u32 id)
{
	 //volatile int* uart_iq_capture=(volatile int*) context2;
	 if ((IORD_ALTERA_AVALON_UART_STATUS(UART_BASE)&0X0080)==0x0080)
   20254:	00c00134 	movhi	r3,4
   20258:	18c80204 	addi	r3,r3,8200
   2025c:	18800037 	ldwio	r2,0(r3)
   20260:	1080200c 	andi	r2,r2,128
   20264:	10004b26 	beq	r2,zero,20394 <uart_rx_tx_isr+0x140>
		   {

		    tempRece=(IORD_ALTERA_AVALON_UART_RXDATA(UART_BASE)&0xff);
   20268:	00800134 	movhi	r2,4
   2026c:	10880004 	addi	r2,r2,8192
   20270:	10800037 	ldwio	r2,0(r2)
   20274:	d0a01405 	stb	r2,-32688(gp)
		    if(RxStart==0)
   20278:	d0a00e03 	ldbu	r2,-32712(gp)
   2027c:	1000131e 	bne	r2,zero,202cc <uart_rx_tx_isr+0x78>
		            {
		              RxPtr=0;
   20280:	d0201045 	stb	zero,-32703(gp)
		              ReceBuf[RxPtr]=tempRece;
   20284:	d0a01043 	ldbu	r2,-32703(gp)
   20288:	d1201403 	ldbu	r4,-32688(gp)
   2028c:	d0e01104 	addi	r3,gp,-32700
   20290:	10803fcc 	andi	r2,r2,255
   20294:	10c5883a 	add	r2,r2,r3
   20298:	11000005 	stb	r4,0(r2)
		              RxPtr++;
   2029c:	d0a01043 	ldbu	r2,-32703(gp)
            		 if (ReceBuf[0]==0x0A)
   202a0:	00c00284 	movi	r3,10
		    tempRece=(IORD_ALTERA_AVALON_UART_RXDATA(UART_BASE)&0xff);
		    if(RxStart==0)
		            {
		              RxPtr=0;
		              ReceBuf[RxPtr]=tempRece;
		              RxPtr++;
   202a4:	10800044 	addi	r2,r2,1
   202a8:	d0a01045 	stb	r2,-32703(gp)
            		 if (ReceBuf[0]==0x0A)
   202ac:	d0a01103 	ldbu	r2,-32700(gp)
   202b0:	10803fcc 	andi	r2,r2,255
   202b4:	10c0031e 	bne	r2,r3,202c4 <uart_rx_tx_isr+0x70>
		                {
            			    RxStart=1;
   202b8:	00800044 	movi	r2,1
   202bc:	d0a00e05 	stb	r2,-32712(gp)
   202c0:	f800283a 	ret
		                 }
            		 else
            		 {
            			 RxStart=0;
   202c4:	d0200e05 	stb	zero,-32712(gp)
   202c8:	f800283a 	ret
            		 }

		              //RxStart=1;
            		 }
		    else if (RxStart==1)
   202cc:	d0a00e03 	ldbu	r2,-32712(gp)
   202d0:	11803fcc 	andi	r6,r2,255
   202d4:	00800044 	movi	r2,1
   202d8:	30804b1e 	bne	r6,r2,20408 <uart_rx_tx_isr+0x1b4>
		    {
		    	ReceBuf[RxPtr]=tempRece;
   202dc:	d0a01043 	ldbu	r2,-32703(gp)
   202e0:	d0e01403 	ldbu	r3,-32688(gp)
   202e4:	d1601104 	addi	r5,gp,-32700
   202e8:	10803fcc 	andi	r2,r2,255
   202ec:	1145883a 	add	r2,r2,r5
   202f0:	10c00005 	stb	r3,0(r2)
		    	RxPtr++;
   202f4:	d0a01043 	ldbu	r2,-32703(gp)
		    	if (RxPtr==5)
   202f8:	00c00144 	movi	r3,5
		              //RxStart=1;
            		 }
		    else if (RxStart==1)
		    {
		    	ReceBuf[RxPtr]=tempRece;
		    	RxPtr++;
   202fc:	1185883a 	add	r2,r2,r6
   20300:	d0a01045 	stb	r2,-32703(gp)
		    	if (RxPtr==5)
   20304:	d0a01043 	ldbu	r2,-32703(gp)
   20308:	10803fcc 	andi	r2,r2,255
   2030c:	10c03e1e 	bne	r2,r3,20408 <uart_rx_tx_isr+0x1b4>
		    	{
		    		RxPtr=0;
   20310:	d0201045 	stb	zero,-32703(gp)
		    		RxStart=0;
   20314:	d0200e05 	stb	zero,-32712(gp)
		    		send_data_l=((ReceBuf[1]|0x00000000)<<24)|((ReceBuf[2]|0x00000000)<<16)|((ReceBuf[3]|0x00000000)<<8)|ReceBuf[4];//0x5A5A5A5A;
   20318:	28c00043 	ldbu	r3,1(r5)
   2031c:	29000083 	ldbu	r4,2(r5)
   20320:	288000c3 	ldbu	r2,3(r5)
   20324:	1806963a 	slli	r3,r3,24
   20328:	21003fcc 	andi	r4,r4,255
   2032c:	29400103 	ldbu	r5,4(r5)
   20330:	2008943a 	slli	r4,r4,16
   20334:	10803fcc 	andi	r2,r2,255
   20338:	1004923a 	slli	r2,r2,8
   2033c:	1906b03a 	or	r3,r3,r4
   20340:	29403fcc 	andi	r5,r5,255
   20344:	1946b03a 	or	r3,r3,r5
   20348:	10c4b03a 	or	r2,r2,r3
   2034c:	d0a00f15 	stw	r2,-32708(gp)
		    		send_data_h=ReceBuf[0];//0x0A;
   20350:	d0a01103 	ldbu	r2,-32700(gp)
   20354:	d0a01585 	stb	r2,-32682(gp)
		    		master=1;
   20358:	d1a01605 	stb	r6,-32680(gp)
		    		IOWR_ALTERA_AVALON_PIO_DATA(TX_DATA_L_BASE,send_data_l);
   2035c:	d0e00f17 	ldw	r3,-32708(gp)
   20360:	00800134 	movhi	r2,4
   20364:	10881004 	addi	r2,r2,8256
   20368:	10c00035 	stwio	r3,0(r2)
		    		IOWR_ALTERA_AVALON_PIO_DATA(TX_DATA_H_BASE,send_data_h);
   2036c:	d0a01583 	ldbu	r2,-32682(gp)
   20370:	00c00134 	movhi	r3,4
   20374:	18c80c04 	addi	r3,r3,8240
   20378:	10803fcc 	andi	r2,r2,255
   2037c:	18800035 	stwio	r2,0(r3)
		    		IOWR_ALTERA_AVALON_PIO_DATA(TX_DATA_VALID_BASE,0x01);
   20380:	00800134 	movhi	r2,4
   20384:	10880804 	addi	r2,r2,8224
   20388:	11800035 	stwio	r6,0(r2)
		    		IOWR_ALTERA_AVALON_PIO_DATA(TX_DATA_VALID_BASE,0x00);
   2038c:	10000035 	stwio	zero,0(r2)
   20390:	f800283a 	ret

		    	}
		    }
		   }
		else if ((IORD_ALTERA_AVALON_UART_STATUS(UART_BASE)&0X0040)==0x0040)
   20394:	18800037 	ldwio	r2,0(r3)
   20398:	1080100c 	andi	r2,r2,64
   2039c:	10001a26 	beq	r2,zero,20408 <uart_rx_tx_isr+0x1b4>
	 {

        if( wr_flag==1)
   203a0:	d0a015c3 	ldbu	r2,-32681(gp)
   203a4:	11003fcc 	andi	r4,r2,255
   203a8:	00800044 	movi	r2,1
   203ac:	2080161e 	bne	r4,r2,20408 <uart_rx_tx_isr+0x1b4>
        {
          if (send_ptr<5)
   203b0:	d0a010c3 	ldbu	r2,-32701(gp)
   203b4:	00c00104 	movi	r3,4
   203b8:	10803fcc 	andi	r2,r2,255
   203bc:	18801236 	bltu	r3,r2,20408 <uart_rx_tx_isr+0x1b4>
            {
             IOWR_ALTERA_AVALON_UART_TXDATA(UART_BASE, SendBuf[send_ptr]);
   203c0:	d0a010c3 	ldbu	r2,-32701(gp)
   203c4:	d0e01444 	addi	r3,gp,-32687
   203c8:	10803fcc 	andi	r2,r2,255
   203cc:	10c5883a 	add	r2,r2,r3
   203d0:	10800003 	ldbu	r2,0(r2)
   203d4:	00c00134 	movhi	r3,4
   203d8:	18c80104 	addi	r3,r3,8196
   203dc:	10803fcc 	andi	r2,r2,255
   203e0:	18800035 	stwio	r2,0(r3)
             send_ptr++;
   203e4:	d0a010c3 	ldbu	r2,-32701(gp)
               if (send_ptr==5)
   203e8:	00c00144 	movi	r3,5
        if( wr_flag==1)
        {
          if (send_ptr<5)
            {
             IOWR_ALTERA_AVALON_UART_TXDATA(UART_BASE, SendBuf[send_ptr]);
             send_ptr++;
   203ec:	1105883a 	add	r2,r2,r4
   203f0:	d0a010c5 	stb	r2,-32701(gp)
               if (send_ptr==5)
   203f4:	d0a010c3 	ldbu	r2,-32701(gp)
   203f8:	10803fcc 	andi	r2,r2,255
   203fc:	10c0021e 	bne	r2,r3,20408 <uart_rx_tx_isr+0x1b4>
                  {
                       send_ptr=0;
   20400:	d02010c5 	stb	zero,-32701(gp)
                        wr_flag=0;
   20404:	d02015c5 	stb	zero,-32681(gp)
   20408:	f800283a 	ret

0002040c <data_rcv_isr>:


void data_rcv_isr (void* context,alt_u32 id)
{
                 //volatile int* pio_iq_capture=(volatile int*) context1;
	             IOWR_ALTERA_AVALON_PIO_EDGE_CAP(PRE_COME_BASE,0x00);
   2040c:	00800134 	movhi	r2,4
   20410:	10881704 	addi	r2,r2,8284
   20414:	10000035 	stwio	zero,0(r2)
	             rcv_data_l=IORD_ALTERA_AVALON_PIO_DATA(DATA_L_BASE);
   20418:	10800104 	addi	r2,r2,4
   2041c:	10800037 	ldwio	r2,0(r2)
   20420:	d0a01315 	stw	r2,-32692(gp)
			     rcv_data_h=IORD_ALTERA_AVALON_PIO_DATA(DATA_H_BASE);
   20424:	00800134 	movhi	r2,4
   20428:	10881c04 	addi	r2,r2,8304
   2042c:	10800037 	ldwio	r2,0(r2)
			     //IOWR_ALTERA_AVALON_PIO_DATA(DATA_CLR_BASE,0x00);
			     //IOWR_ALTERA_AVALON_PIO_DATA(DATA_CLR_BASE,0x00);
			     SendBuf[0]=rcv_data_h&0x0F;
   20430:	d0e01444 	addi	r3,gp,-32687
void data_rcv_isr (void* context,alt_u32 id)
{
                 //volatile int* pio_iq_capture=(volatile int*) context1;
	             IOWR_ALTERA_AVALON_PIO_EDGE_CAP(PRE_COME_BASE,0x00);
	             rcv_data_l=IORD_ALTERA_AVALON_PIO_DATA(DATA_L_BASE);
			     rcv_data_h=IORD_ALTERA_AVALON_PIO_DATA(DATA_H_BASE);
   20434:	d0a01005 	stb	r2,-32704(gp)
			     //IOWR_ALTERA_AVALON_PIO_DATA(DATA_CLR_BASE,0x00);
			     //IOWR_ALTERA_AVALON_PIO_DATA(DATA_CLR_BASE,0x00);
			     SendBuf[0]=rcv_data_h&0x0F;
   20438:	d0a01003 	ldbu	r2,-32704(gp)
   2043c:	108003cc 	andi	r2,r2,15
   20440:	d0a01445 	stb	r2,-32687(gp)
				 SendBuf[1]=(rcv_data_l>>24)&0xFF;
   20444:	d0a01317 	ldw	r2,-32692(gp)
   20448:	1004d63a 	srli	r2,r2,24
   2044c:	18800045 	stb	r2,1(r3)
				 SendBuf[2]=(rcv_data_l>>16)&0xFF;
   20450:	d0a01317 	ldw	r2,-32692(gp)
   20454:	1004d43a 	srli	r2,r2,16
   20458:	18800085 	stb	r2,2(r3)
				 SendBuf[3]=(rcv_data_l>>8)&0xFF;
   2045c:	d0a01317 	ldw	r2,-32692(gp)
   20460:	1004d23a 	srli	r2,r2,8
   20464:	188000c5 	stb	r2,3(r3)
				 SendBuf[4]=rcv_data_l&0xFF;
   20468:	d0a01317 	ldw	r2,-32692(gp)
   2046c:	18800105 	stb	r2,4(r3)


		     //if ((SendBuf[0]==0x0A)&&(wr_flag==0))
			 if (wr_flag==0)
   20470:	d0a015c3 	ldbu	r2,-32681(gp)
   20474:	10000a1e 	bne	r2,zero,204a0 <data_rcv_isr+0x94>
		 	      {
		 	   	    wr_flag=1;
   20478:	00800044 	movi	r2,1
   2047c:	d0a015c5 	stb	r2,-32681(gp)
		 	    	IOWR_ALTERA_AVALON_UART_TXDATA(UART_BASE, SendBuf[0]);
   20480:	d0a01443 	ldbu	r2,-32687(gp)
   20484:	00c00134 	movhi	r3,4
   20488:	18c80104 	addi	r3,r3,8196
   2048c:	10803fcc 	andi	r2,r2,255
   20490:	18800035 	stwio	r2,0(r3)
		 	   	    //IOWR_ALTERA_AVALON_UART_TXDATA(UART_BASE, 0xFF);
		 	    	send_ptr++;
   20494:	d0a010c3 	ldbu	r2,-32701(gp)
   20498:	10800044 	addi	r2,r2,1
   2049c:	d0a010c5 	stb	r2,-32701(gp)
		 	    	//uart_init();
		 	      }
			if (master==0)
   204a0:	d0a01603 	ldbu	r2,-32680(gp)
   204a4:	10000d1e 	bne	r2,zero,204dc <data_rcv_isr+0xd0>
			{
				IOWR_ALTERA_AVALON_PIO_DATA(TX_DATA_L_BASE,rcv_data_l);
   204a8:	d0e01317 	ldw	r3,-32692(gp)
   204ac:	00800134 	movhi	r2,4
   204b0:	10881004 	addi	r2,r2,8256
   204b4:	10c00035 	stwio	r3,0(r2)
				IOWR_ALTERA_AVALON_PIO_DATA(TX_DATA_H_BASE,rcv_data_h);
   204b8:	d0a01003 	ldbu	r2,-32704(gp)
   204bc:	00c00134 	movhi	r3,4
   204c0:	18c80c04 	addi	r3,r3,8240
   204c4:	10803fcc 	andi	r2,r2,255
   204c8:	18800035 	stwio	r2,0(r3)
				IOWR_ALTERA_AVALON_PIO_DATA(TX_DATA_VALID_BASE,0x01);
   204cc:	18fffc04 	addi	r3,r3,-16
   204d0:	00800044 	movi	r2,1
   204d4:	18800035 	stwio	r2,0(r3)
				IOWR_ALTERA_AVALON_PIO_DATA(TX_DATA_VALID_BASE,0x00);
   204d8:	18000035 	stwio	zero,0(r3)
   204dc:	f800283a 	ret

000204e0 <alt_irq_register>:
                      alt_isr_func handler)
{
  int rc = -EINVAL;  
  alt_irq_context status;

  if (id < ALT_NIRQ)
   204e0:	008007c4 	movi	r2,31
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
   204e4:	200f883a 	mov	r7,r4
  int rc = -EINVAL;  
  alt_irq_context status;

  if (id < ALT_NIRQ)
   204e8:	00fffa84 	movi	r3,-22
   204ec:	11002236 	bltu	r2,r4,20578 <alt_irq_register+0x98>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   204f0:	0015303a 	rdctl	r10,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   204f4:	027fff84 	movi	r9,-2
   204f8:	5244703a 	and	r2,r10,r9
   204fc:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all ();

    alt_irq[id].handler = handler;
   20500:	200490fa 	slli	r2,r4,3
   20504:	00c000b4 	movhi	r3,2
   20508:	18d03c04 	addi	r3,r3,16624
   2050c:	020000b4 	movhi	r8,2
   20510:	42103504 	addi	r8,r8,16596
   20514:	10c5883a 	add	r2,r2,r3
    alt_irq[id].context = context;
   20518:	11400115 	stw	r5,4(r2)
     * state.
     */

    status = alt_irq_disable_all ();

    alt_irq[id].handler = handler;
   2051c:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = context;

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   20520:	30000826 	beq	r6,zero,20544 <alt_irq_register+0x64>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   20524:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   20528:	2244703a 	and	r2,r4,r9
   2052c:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
   20530:	00c00044 	movi	r3,1
   20534:	19c6983a 	sll	r3,r3,r7
   20538:	40800017 	ldw	r2,0(r8)
   2053c:	10c4b03a 	or	r2,r2,r3
   20540:	00000706 	br	20560 <alt_irq_register+0x80>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   20544:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   20548:	2244703a 	and	r2,r4,r9
   2054c:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
   20550:	00ffff84 	movi	r3,-2
   20554:	19c6183a 	rol	r3,r3,r7
   20558:	40800017 	ldw	r2,0(r8)
   2055c:	10c4703a 	and	r2,r2,r3
   20560:	40800015 	stw	r2,0(r8)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   20564:	40800017 	ldw	r2,0(r8)
   20568:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2056c:	2001703a 	wrctl	status,r4
   20570:	5001703a 	wrctl	status,r10
   20574:	0007883a 	mov	r3,zero

    alt_irq_enable_all(status);
  }
  return rc; 
}
   20578:	1805883a 	mov	r2,r3
   2057c:	f800283a 	ret

00020580 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   20580:	defffe04 	addi	sp,sp,-8
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   20584:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   20588:	dfc00115 	stw	ra,4(sp)
   2058c:	dc000015 	stw	r16,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   20590:	00206500 	call	20650 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   20594:	00205ec0 	call	205ec <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   20598:	010000b4 	movhi	r4,2
   2059c:	210a2604 	addi	r4,r4,10392
   205a0:	200b883a 	mov	r5,r4
   205a4:	200d883a 	mov	r6,r4
   205a8:	0021e6c0 	call	21e6c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   205ac:	0021c140 	call	21c14 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   205b0:	010000b4 	movhi	r4,2
   205b4:	21071504 	addi	r4,r4,7252
   205b8:	00223c40 	call	223c4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   205bc:	d1201817 	ldw	r4,-32672(gp)
   205c0:	d1601917 	ldw	r5,-32668(gp)
   205c4:	d1a01a17 	ldw	r6,-32664(gp)
   205c8:	00201a80 	call	201a8 <main>
   205cc:	1021883a 	mov	r16,r2
  close(STDOUT_FILENO);
   205d0:	01000044 	movi	r4,1
   205d4:	0021b040 	call	21b04 <close>
  exit (result);
   205d8:	8009883a 	mov	r4,r16
   205dc:	00223d80 	call	223d8 <exit>

000205e0 <alt_dev_reg>:

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   205e0:	014000b4 	movhi	r5,2
   205e4:	29502204 	addi	r5,r5,16520
   205e8:	0021ba41 	jmpi	21ba4 <alt_dev_llist_insert>

000205ec <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   205ec:	defffe04 	addi	sp,sp,-8
    ALTERA_AVALON_EPCS_FLASH_CONTROLLER_INIT ( EPCS_FLASH_CONTROLLER_0, epcs_flash_controller_0);
   205f0:	010000b4 	movhi	r4,2
   205f4:	210a3904 	addi	r4,r4,10468
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   205f8:	dfc00115 	stw	ra,4(sp)
   205fc:	dc000015 	stw	r16,0(sp)
    ALTERA_AVALON_EPCS_FLASH_CONTROLLER_INIT ( EPCS_FLASH_CONTROLLER_0, epcs_flash_controller_0);
   20600:	0020a100 	call	20a10 <alt_epcs_flash_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   20604:	040000b4 	movhi	r16,2
   20608:	840a7504 	addi	r16,r16,10708
   2060c:	000b883a 	mov	r5,zero
   20610:	000d883a 	mov	r6,zero
   20614:	8009883a 	mov	r4,r16
   20618:	0020c6c0 	call	20c6c <altera_avalon_jtag_uart_init>
   2061c:	813ff604 	addi	r4,r16,-40
   20620:	00205e00 	call	205e0 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    ALTERA_AVALON_UART_INIT ( UART, uart);
   20624:	040000b4 	movhi	r16,2
   20628:	840e8d04 	addi	r16,r16,14900
   2062c:	8009883a 	mov	r4,r16
   20630:	000b883a 	mov	r5,zero
   20634:	018000c4 	movi	r6,3
   20638:	00212a00 	call	212a0 <altera_avalon_uart_init>
   2063c:	813ff604 	addi	r4,r16,-40
}
   20640:	dfc00117 	ldw	ra,4(sp)
   20644:	dc000017 	ldw	r16,0(sp)
   20648:	dec00204 	addi	sp,sp,8
void alt_sys_init( void )
{
    ALTERA_AVALON_EPCS_FLASH_CONTROLLER_INIT ( EPCS_FLASH_CONTROLLER_0, epcs_flash_controller_0);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    ALTERA_AVALON_UART_INIT ( UART, uart);
   2064c:	00205e01 	jmpi	205e0 <alt_dev_reg>

00020650 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   20650:	deffff04 	addi	sp,sp,-4
   20654:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, CPU);
   20658:	00221700 	call	22170 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   2065c:	00800044 	movi	r2,1
   20660:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   20664:	dfc00017 	ldw	ra,0(sp)
   20668:	dec00104 	addi	sp,sp,4
   2066c:	f800283a 	ret

00020670 <alt_epcs_flash_get_info>:
{
  int ret_code = 0;

  alt_flash_dev* flash = (alt_flash_dev*)fd;

  *number_of_regions = flash->number_of_regions;
   20670:	20800c17 	ldw	r2,48(r4)

  if (!flash->number_of_regions)
   20674:	01fffec4 	movi	r7,-5
{
  int ret_code = 0;

  alt_flash_dev* flash = (alt_flash_dev*)fd;

  *number_of_regions = flash->number_of_regions;
   20678:	30800015 	stw	r2,0(r6)

  if (!flash->number_of_regions)
   2067c:	20c00c17 	ldw	r3,48(r4)
   20680:	18000626 	beq	r3,zero,2069c <alt_epcs_flash_get_info+0x2c>
  {
    ret_code = -EIO;
  }
  else if (flash->number_of_regions > ALT_MAX_NUMBER_OF_FLASH_REGIONS)
   20684:	00800204 	movi	r2,8
  {
    ret_code = -ENOMEM;
  }
  else
  {
    *info = &flash->region_info[0];
   20688:	21000d04 	addi	r4,r4,52

  if (!flash->number_of_regions)
  {
    ret_code = -EIO;
  }
  else if (flash->number_of_regions > ALT_MAX_NUMBER_OF_FLASH_REGIONS)
   2068c:	01fffd04 	movi	r7,-12
   20690:	10c00216 	blt	r2,r3,2069c <alt_epcs_flash_get_info+0x2c>
  {
    ret_code = -ENOMEM;
  }
  else
  {
    *info = &flash->region_info[0];
   20694:	29000015 	stw	r4,0(r5)
   20698:	000f883a 	mov	r7,zero
  }

  return ret_code;
}
   2069c:	3805883a 	mov	r2,r7
   206a0:	f800283a 	ret

000206a4 <alt_epcs_test_address>:
  /* Error checking:
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
   206a4:	20800c17 	ldw	r2,48(r4)
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;

  if (offset > last_device_address)
   206a8:	01bffec4 	movi	r6,-5
  /* Error checking:
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
   206ac:	10bfffc4 	addi	r2,r2,-1
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;

  if (offset > last_device_address)
   206b0:	1004913a 	slli	r2,r2,4
   206b4:	1105883a 	add	r2,r2,r4
   206b8:	10c00d17 	ldw	r3,52(r2)
   206bc:	10800e17 	ldw	r2,56(r2)
   206c0:	18ffffc4 	addi	r3,r3,-1
   206c4:	1887883a 	add	r3,r3,r2
   206c8:	19400136 	bltu	r3,r5,206d0 <alt_epcs_test_address+0x2c>
   206cc:	000d883a 	mov	r6,zero
  {
    /* Someone tried to erase a block outside of this device's range. */
    ret_code = -EIO;
  }
  return ret_code;
}
   206d0:	3005883a 	mov	r2,r6
   206d4:	f800283a 	ret

000206d8 <alt_epcs_flash_read>:
 *  to the beginning.  Reads that start beyond the end of the memory are
 *  flagged as errors with EIO (is there a better error code?).
 */
int alt_epcs_flash_read(alt_flash_dev* flash_info, int offset,
                        void* dest_addr, int length)
{
   206d8:	defffa04 	addi	sp,sp,-24
   206dc:	dcc00415 	stw	r19,16(sp)
   206e0:	dc800315 	stw	r18,12(sp)
   206e4:	dc400215 	stw	r17,8(sp)
   206e8:	dc000115 	stw	r16,4(sp)
   206ec:	dfc00515 	stw	ra,20(sp)
   206f0:	3827883a 	mov	r19,r7
   206f4:	3023883a 	mov	r17,r6
   206f8:	2821883a 	mov	r16,r5
   206fc:	2025883a 	mov	r18,r4
  int ret_code = 0;

  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  ret_code = alt_epcs_test_address(flash_info, offset);
   20700:	00206a40 	call	206a4 <alt_epcs_test_address>
   20704:	1007883a 	mov	r3,r2

  if (ret_code >= 0)
  {
    ret_code = epcs_read_buffer(f->register_base, offset, dest_addr, length,
   20708:	800b883a 	mov	r5,r16
   2070c:	880d883a 	mov	r6,r17
   20710:	980f883a 	mov	r7,r19

  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  ret_code = alt_epcs_test_address(flash_info, offset);

  if (ret_code >= 0)
   20714:	10000716 	blt	r2,zero,20734 <alt_epcs_flash_read+0x5c>
  {
    ret_code = epcs_read_buffer(f->register_base, offset, dest_addr, length,
   20718:	91002d17 	ldw	r4,180(r18)
   2071c:	90803117 	ldw	r2,196(r18)
   20720:	d8800015 	stw	r2,0(sp)
   20724:	00218bc0 	call	218bc <epcs_read_buffer>
                                f->four_bytes_mode);

    /* epcs_read_buffer returns the number of buffers read, but
     * alt_epcs_flash_read returns 0 on success, <0 on failure.
     */
    if (ret_code == length)
   20728:	1007883a 	mov	r3,r2
   2072c:	14c0011e 	bne	r2,r19,20734 <alt_epcs_flash_read+0x5c>
   20730:	0007883a 	mov	r3,zero
    {
      ret_code = 0;
    }
  }
  return ret_code;
}
   20734:	1805883a 	mov	r2,r3
   20738:	dfc00517 	ldw	ra,20(sp)
   2073c:	dcc00417 	ldw	r19,16(sp)
   20740:	dc800317 	ldw	r18,12(sp)
   20744:	dc400217 	ldw	r17,8(sp)
   20748:	dc000117 	ldw	r16,4(sp)
   2074c:	dec00604 	addi	sp,sp,24
   20750:	f800283a 	ret

00020754 <alt_epcs_flash_write_block>:
 * function type compatibility.
 */
int alt_epcs_flash_write_block(alt_flash_dev* flash_info, int block_offset,
                                      int data_offset, const void* data,
                                      int length)
{
   20754:	defff804 	addi	sp,sp,-32
   20758:	dd400615 	stw	r21,24(sp)
   2075c:	dd000515 	stw	r20,20(sp)
   20760:	dc800315 	stw	r18,12(sp)
   20764:	dc400215 	stw	r17,8(sp)
   20768:	dc000115 	stw	r16,4(sp)
   2076c:	dfc00715 	stw	ra,28(sp)
   20770:	dcc00415 	stw	r19,16(sp)
  int ret_code;
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  int buffer_offset = 0;
  int length_of_current_write;
  ret_code = alt_epcs_test_address(flash_info, data_offset);
   20774:	300b883a 	mov	r5,r6
 * function type compatibility.
 */
int alt_epcs_flash_write_block(alt_flash_dev* flash_info, int block_offset,
                                      int data_offset, const void* data,
                                      int length)
{
   20778:	3023883a 	mov	r17,r6
   2077c:	382b883a 	mov	r21,r7
   20780:	2025883a 	mov	r18,r4
  int ret_code;
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  int buffer_offset = 0;
  int length_of_current_write;
  ret_code = alt_epcs_test_address(flash_info, data_offset);
   20784:	00206a40 	call	206a4 <alt_epcs_test_address>
   20788:	1029883a 	mov	r20,r2
 * function type compatibility.
 */
int alt_epcs_flash_write_block(alt_flash_dev* flash_info, int block_offset,
                                      int data_offset, const void* data,
                                      int length)
{
   2078c:	dc000817 	ldw	r16,32(sp)

  int buffer_offset = 0;
  int length_of_current_write;
  ret_code = alt_epcs_test_address(flash_info, data_offset);

  if (ret_code >= 0)
   20790:	10001416 	blt	r2,zero,207e4 <alt_epcs_flash_write_block+0x90>
   20794:	0027883a 	mov	r19,zero
   20798:	00000f06 	br	207d8 <alt_epcs_flash_write_block+0x84>
    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
    {
      int next_page_start = (data_offset + f->page_size) & ~(f->page_size - 1);
   2079c:	90803017 	ldw	r2,192(r18)
   207a0:	0087c83a 	sub	r3,zero,r2
   207a4:	8885883a 	add	r2,r17,r2
   207a8:	10c4703a 	and	r2,r2,r3
      length_of_current_write = MIN(length, next_page_start - data_offset);
   207ac:	1447c83a 	sub	r3,r2,r17

      epcs_write_buffer(f->register_base, data_offset, &((const alt_u8*)data)[buffer_offset], length_of_current_write,
          f->four_bytes_mode);

      length -= length_of_current_write;
      buffer_offset += length_of_current_write;
   207b0:	1023883a 	mov	r17,r2
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
    {
      int next_page_start = (data_offset + f->page_size) & ~(f->page_size - 1);
      length_of_current_write = MIN(length, next_page_start - data_offset);
   207b4:	80c0010e 	bge	r16,r3,207bc <alt_epcs_flash_write_block+0x68>
   207b8:	8007883a 	mov	r3,r16

      epcs_write_buffer(f->register_base, data_offset, &((const alt_u8*)data)[buffer_offset], length_of_current_write,
   207bc:	91002d17 	ldw	r4,180(r18)
   207c0:	90803117 	ldw	r2,196(r18)
   207c4:	180f883a 	mov	r7,r3
          f->four_bytes_mode);

      length -= length_of_current_write;
      buffer_offset += length_of_current_write;
   207c8:	98e7883a 	add	r19,r19,r3
    while (length)
    {
      int next_page_start = (data_offset + f->page_size) & ~(f->page_size - 1);
      length_of_current_write = MIN(length, next_page_start - data_offset);

      epcs_write_buffer(f->register_base, data_offset, &((const alt_u8*)data)[buffer_offset], length_of_current_write,
   207cc:	d8800015 	stw	r2,0(sp)
          f->four_bytes_mode);

      length -= length_of_current_write;
   207d0:	80e1c83a 	sub	r16,r16,r3
    while (length)
    {
      int next_page_start = (data_offset + f->page_size) & ~(f->page_size - 1);
      length_of_current_write = MIN(length, next_page_start - data_offset);

      epcs_write_buffer(f->register_base, data_offset, &((const alt_u8*)data)[buffer_offset], length_of_current_write,
   207d4:	00217440 	call	21744 <epcs_write_buffer>
   207d8:	880b883a 	mov	r5,r17
   207dc:	accd883a 	add	r6,r21,r19
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
   207e0:	803fee1e 	bne	r16,zero,2079c <alt_epcs_flash_write_block+0x48>
      buffer_offset += length_of_current_write;
      data_offset = next_page_start;
    }
  }
  return ret_code;
}
   207e4:	a005883a 	mov	r2,r20
   207e8:	dfc00717 	ldw	ra,28(sp)
   207ec:	dd400617 	ldw	r21,24(sp)
   207f0:	dd000517 	ldw	r20,20(sp)
   207f4:	dcc00417 	ldw	r19,16(sp)
   207f8:	dc800317 	ldw	r18,12(sp)
   207fc:	dc400217 	ldw	r17,8(sp)
   20800:	dc000117 	ldw	r16,4(sp)
   20804:	dec00804 	addi	sp,sp,32
   20808:	f800283a 	ret

0002080c <alt_epcs_flash_erase_block>:
 *
 * Erase the selected erase block ("sector erase", from the POV
 * of the EPCS data sheet).
 */
int alt_epcs_flash_erase_block(alt_flash_dev* flash_info, int block_offset)
{
   2080c:	defffc04 	addi	sp,sp,-16
   20810:	dc800215 	stw	r18,8(sp)
   20814:	dc400115 	stw	r17,4(sp)
   20818:	dc000015 	stw	r16,0(sp)
   2081c:	dfc00315 	stw	ra,12(sp)
   20820:	2821883a 	mov	r16,r5
   20824:	2025883a 	mov	r18,r4
  int ret_code = 0;
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  ret_code = alt_epcs_test_address(flash_info, block_offset);
   20828:	00206a40 	call	206a4 <alt_epcs_test_address>
   2082c:	1023883a 	mov	r17,r2
  if (ret_code >= 0)
  {
    /* Send the Sector Erase command, whose 3 address bytes are anywhere
     * within the chosen sector.
     */
    epcs_sector_erase(f->register_base, block_offset, f->four_bytes_mode);
   20830:	800b883a 	mov	r5,r16
  int ret_code = 0;
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  ret_code = alt_epcs_test_address(flash_info, block_offset);

  if (ret_code >= 0)
   20834:	10000316 	blt	r2,zero,20844 <alt_epcs_flash_erase_block+0x38>
  {
    /* Send the Sector Erase command, whose 3 address bytes are anywhere
     * within the chosen sector.
     */
    epcs_sector_erase(f->register_base, block_offset, f->four_bytes_mode);
   20838:	91803117 	ldw	r6,196(r18)
   2083c:	91002d17 	ldw	r4,180(r18)
   20840:	002198c0 	call	2198c <epcs_sector_erase>
  }
  return ret_code;
}
   20844:	8805883a 	mov	r2,r17
   20848:	dfc00317 	ldw	ra,12(sp)
   2084c:	dc800217 	ldw	r18,8(sp)
   20850:	dc400117 	ldw	r17,4(sp)
   20854:	dc000017 	ldw	r16,0(sp)
   20858:	dec00404 	addi	sp,sp,16
   2085c:	f800283a 	ret

00020860 <alt_epcs_flash_write>:
 * large buffer to tie up in our programming library, when not all users will
 * want that functionality.
 */
int alt_epcs_flash_write(alt_flash_dev* flash_info, int offset,
                          const void* src_addr, int length)
{
   20860:	deffe904 	addi	sp,sp,-92
   20864:	df001515 	stw	fp,84(sp)
   20868:	dd401215 	stw	r21,72(sp)
   2086c:	dd001115 	stw	r20,68(sp)
   20870:	dcc01015 	stw	r19,64(sp)
   20874:	202b883a 	mov	r21,r4
   20878:	2827883a 	mov	r19,r5
   2087c:	3839883a 	mov	fp,r7
   20880:	2029883a 	mov	r20,r4
   20884:	dfc01615 	stw	ra,88(sp)
   20888:	ddc01415 	stw	r23,80(sp)
   2088c:	dd801315 	stw	r22,76(sp)
   20890:	dc800f15 	stw	r18,60(sp)
   20894:	dc400e15 	stw	r17,56(sp)
   20898:	dc000d15 	stw	r16,52(sp)
   2089c:	d9800c15 	stw	r6,48(sp)
   208a0:	d8000b15 	stw	zero,44(sp)
   208a4:	d8000a15 	stw	zero,40(sp)
   208a8:	00004906 	br	209d0 <alt_epcs_flash_write+0x170>
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
   208ac:	a4800d17 	ldw	r18,52(r20)
   208b0:	9c804316 	blt	r19,r18,209c0 <alt_epcs_flash_write+0x160>
   208b4:	a0800e17 	ldw	r2,56(r20)
   208b8:	9085883a 	add	r2,r18,r2
   208bc:	9880400e 	bge	r19,r2,209c0 <alt_epcs_flash_write+0x160>
   208c0:	d8000915 	stw	zero,36(sp)
   208c4:	00003b06 	br	209b4 <alt_epcs_flash_write+0x154>
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
      {
        if ((offset >= current_offset ) &&
   208c8:	9c803516 	blt	r19,r18,209a0 <alt_epcs_flash_write+0x140>
   208cc:	a0801017 	ldw	r2,64(r20)
   208d0:	9085883a 	add	r2,r18,r2
   208d4:	9880320e 	bge	r19,r2,209a0 <alt_epcs_flash_write+0x140>
        {
          /*
           * Check if the contents of the block are different
           * from the data we wish to put there
           */
          data_to_write = ( current_offset + flash_info->region_info[i].block_size
   208d8:	14c5c83a 	sub	r2,r2,r19
                            - offset);
          data_to_write = MIN(data_to_write, length);
   208dc:	e02d883a 	mov	r22,fp
   208e0:	1700010e 	bge	r2,fp,208e8 <alt_epcs_flash_write+0x88>
   208e4:	102d883a 	mov	r22,r2

          if(alt_epcs_flash_memcmp(flash_info, src_addr, offset, data_to_write))
   208e8:	b023883a 	mov	r17,r22
   208ec:	002f883a 	mov	r23,zero
   208f0:	00000e06 	br	2092c <alt_epcs_flash_write+0xcc>
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
  int current_offset = 0;

  while (n > 0)
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
   208f4:	8821883a 	mov	r16,r17
   208f8:	1440012e 	bgeu	r2,r17,20900 <alt_epcs_flash_write+0xa0>
   208fc:	1021883a 	mov	r16,r2
    int this_chunk_cmp;

    if (
      alt_epcs_flash_read(
   20900:	800f883a 	mov	r7,r16
   20904:	00206d80 	call	206d8 <alt_epcs_flash_read>
      */
      return -1;
    }

    /* Compare this chunk against the source memory buffer. */
    this_chunk_cmp = memcmp(&((unsigned char*)(src_buffer))[current_offset], chunk_buffer, this_chunk_size);
   20908:	d8c00c17 	ldw	r3,48(sp)
    if (this_chunk_cmp)
    {
      return this_chunk_cmp;
    }

    n -= this_chunk_size;
   2090c:	8c23c83a 	sub	r17,r17,r16
      */
      return -1;
    }

    /* Compare this chunk against the source memory buffer. */
    this_chunk_cmp = memcmp(&((unsigned char*)(src_buffer))[current_offset], chunk_buffer, this_chunk_size);
   20910:	d9400104 	addi	r5,sp,4
   20914:	1dc9883a 	add	r4,r3,r23
   20918:	800d883a 	mov	r6,r16
    {
      return this_chunk_cmp;
    }

    n -= this_chunk_size;
    current_offset += this_chunk_size;
   2091c:	bc2f883a 	add	r23,r23,r16
  while (n > 0)
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
    int this_chunk_cmp;

    if (
   20920:	10000816 	blt	r2,zero,20944 <alt_epcs_flash_write+0xe4>
      */
      return -1;
    }

    /* Compare this chunk against the source memory buffer. */
    this_chunk_cmp = memcmp(&((unsigned char*)(src_buffer))[current_offset], chunk_buffer, this_chunk_size);
   20924:	00224100 	call	22410 <memcmp>
   20928:	1000061e 	bne	r2,zero,20944 <alt_epcs_flash_write+0xe4>
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
    int this_chunk_cmp;

    if (
      alt_epcs_flash_read(
   2092c:	9dcb883a 	add	r5,r19,r23
   20930:	a809883a 	mov	r4,r21
   20934:	d9800104 	addi	r6,sp,4
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
  int current_offset = 0;

  while (n > 0)
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
   20938:	00800804 	movi	r2,32
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
  int current_offset = 0;

  while (n > 0)
   2093c:	883fed1e 	bne	r17,zero,208f4 <alt_epcs_flash_write+0x94>
   20940:	00000e06 	br	2097c <alt_epcs_flash_write+0x11c>
                            - offset);
          data_to_write = MIN(data_to_write, length);

          if(alt_epcs_flash_memcmp(flash_info, src_addr, offset, data_to_write))
          {
            ret_code = (*flash_info->erase_block)(flash_info, current_offset);
   20944:	a8800817 	ldw	r2,32(r21)
   20948:	a809883a 	mov	r4,r21
   2094c:	900b883a 	mov	r5,r18
   20950:	103ee83a 	callr	r2
   20954:	d8800b15 	stw	r2,44(sp)

            if (!ret_code)
   20958:	1000081e 	bne	r2,zero,2097c <alt_epcs_flash_write+0x11c>
            {
              ret_code = (*flash_info->write_block)(
   2095c:	a8800917 	ldw	r2,36(r21)
   20960:	d9c00c17 	ldw	r7,48(sp)
   20964:	dd800015 	stw	r22,0(sp)
   20968:	980d883a 	mov	r6,r19
   2096c:	a809883a 	mov	r4,r21
   20970:	900b883a 	mov	r5,r18
   20974:	103ee83a 	callr	r2
   20978:	d8800b15 	stw	r2,44(sp)
                                                  data_to_write);
            }
          }

          /* Was this the last block? */
          if ((length == data_to_write) || ret_code)
   2097c:	e5801726 	beq	fp,r22,209dc <alt_epcs_flash_write+0x17c>
   20980:	d8800b17 	ldw	r2,44(sp)
   20984:	1000151e 	bne	r2,zero,209dc <alt_epcs_flash_write+0x17c>
            goto finished;
          }

          length -= data_to_write;
          offset = current_offset + flash_info->region_info[i].block_size;
          src_addr = (alt_u8*)src_addr + data_to_write;
   20988:	d8c00c17 	ldw	r3,48(sp)
          {
            goto finished;
          }

          length -= data_to_write;
          offset = current_offset + flash_info->region_info[i].block_size;
   2098c:	a0801017 	ldw	r2,64(r20)
          if ((length == data_to_write) || ret_code)
          {
            goto finished;
          }

          length -= data_to_write;
   20990:	e5b9c83a 	sub	fp,fp,r22
          offset = current_offset + flash_info->region_info[i].block_size;
          src_addr = (alt_u8*)src_addr + data_to_write;
   20994:	1d87883a 	add	r3,r3,r22
   20998:	d8c00c15 	stw	r3,48(sp)
          {
            goto finished;
          }

          length -= data_to_write;
          offset = current_offset + flash_info->region_info[i].block_size;
   2099c:	90a7883a 	add	r19,r18,r2
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
   209a0:	d8c00917 	ldw	r3,36(sp)

          length -= data_to_write;
          offset = current_offset + flash_info->region_info[i].block_size;
          src_addr = (alt_u8*)src_addr + data_to_write;
        }
        current_offset += flash_info->region_info[i].block_size;
   209a4:	a0801017 	ldw	r2,64(r20)
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
   209a8:	18c00044 	addi	r3,r3,1
   209ac:	d8c00915 	stw	r3,36(sp)

          length -= data_to_write;
          offset = current_offset + flash_info->region_info[i].block_size;
          src_addr = (alt_u8*)src_addr + data_to_write;
        }
        current_offset += flash_info->region_info[i].block_size;
   209b0:	90a5883a 	add	r18,r18,r2
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
   209b4:	a0800f17 	ldw	r2,60(r20)
   209b8:	d8c00917 	ldw	r3,36(sp)
   209bc:	18bfc216 	blt	r3,r2,208c8 <alt_epcs_flash_write+0x68>
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
   209c0:	d8800a17 	ldw	r2,40(sp)
   209c4:	a5000404 	addi	r20,r20,16
   209c8:	10800044 	addi	r2,r2,1
   209cc:	d8800a15 	stw	r2,40(sp)
   209d0:	a8800c17 	ldw	r2,48(r21)
   209d4:	d8c00a17 	ldw	r3,40(sp)
   209d8:	18bfb416 	blt	r3,r2,208ac <alt_epcs_flash_write+0x4c>
    }
  }

finished:
  return ret_code;
}
   209dc:	d8800b17 	ldw	r2,44(sp)
   209e0:	dfc01617 	ldw	ra,88(sp)
   209e4:	df001517 	ldw	fp,84(sp)
   209e8:	ddc01417 	ldw	r23,80(sp)
   209ec:	dd801317 	ldw	r22,76(sp)
   209f0:	dd401217 	ldw	r21,72(sp)
   209f4:	dd001117 	ldw	r20,68(sp)
   209f8:	dcc01017 	ldw	r19,64(sp)
   209fc:	dc800f17 	ldw	r18,60(sp)
   20a00:	dc400e17 	ldw	r17,56(sp)
   20a04:	dc000d17 	ldw	r16,52(sp)
   20a08:	dec01704 	addi	sp,sp,92
   20a0c:	f800283a 	ret

00020a10 <alt_epcs_flash_init>:
/*
 * alt_epcs_flash_init
 *
 */
int alt_epcs_flash_init(alt_flash_epcs_dev* flash)
{
   20a10:	defffe04 	addi	sp,sp,-8
   20a14:	dc000015 	stw	r16,0(sp)
   20a18:	2021883a 	mov	r16,r4
  
  /* Disable 4-bytes address mode. */
  flash->four_bytes_mode = 0;
  
  /* Send the RES command sequence */
  flash->silicon_id =
   20a1c:	21002d17 	ldw	r4,180(r4)
   * reset the device, or whatever, to ensure that
   * it's in a known working state.
  */
  
  /* Disable 4-bytes address mode. */
  flash->four_bytes_mode = 0;
   20a20:	80003115 	stw	zero,196(r16)
/*
 * alt_epcs_flash_init
 *
 */
int alt_epcs_flash_init(alt_flash_epcs_dev* flash)
{
   20a24:	dfc00115 	stw	ra,4(sp)
  
  /* Disable 4-bytes address mode. */
  flash->four_bytes_mode = 0;
  
  /* Send the RES command sequence */
  flash->silicon_id =
   20a28:	002157c0 	call	2157c <epcs_read_electronic_signature>
   20a2c:	10c03fcc 	andi	r3,r2,255
    epcs_read_electronic_signature(flash->register_base);

  /* Fill in all device-specific parameters. */
  if (flash->silicon_id == 0x16) /* EPCS64 */
   20a30:	00800584 	movi	r2,22
  
  /* Disable 4-bytes address mode. */
  flash->four_bytes_mode = 0;
  
  /* Send the RES command sequence */
  flash->silicon_id =
   20a34:	80c02f15 	stw	r3,188(r16)
    epcs_read_electronic_signature(flash->register_base);

  /* Fill in all device-specific parameters. */
  if (flash->silicon_id == 0x16) /* EPCS64 */
   20a38:	1880041e 	bne	r3,r2,20a4c <alt_epcs_flash_init+0x3c>
  {
    flash->dev.region_info[0].region_size = 64 * 1024 * 1024 / 8;
   20a3c:	00802034 	movhi	r2,128
   20a40:	80800e15 	stw	r2,56(r16)
    flash->dev.region_info[0].number_of_blocks = 128;
   20a44:	00802004 	movi	r2,128
   20a48:	00000506 	br	20a60 <alt_epcs_flash_init+0x50>
    flash->dev.region_info[0].block_size = 65536;
  }
  else if (flash->silicon_id == 0x14) /* EPCS16 */
   20a4c:	00800504 	movi	r2,20
   20a50:	1880071e 	bne	r3,r2,20a70 <alt_epcs_flash_init+0x60>
  {
    flash->dev.region_info[0].region_size = 16 * 1024 * 1024 / 8;
   20a54:	00800834 	movhi	r2,32
   20a58:	80800e15 	stw	r2,56(r16)
    flash->dev.region_info[0].number_of_blocks = 32;
   20a5c:	00800804 	movi	r2,32
   20a60:	80800f15 	stw	r2,60(r16)
    flash->dev.region_info[0].block_size = 65536;
   20a64:	00800074 	movhi	r2,1
   20a68:	80801015 	stw	r2,64(r16)
   20a6c:	00003506 	br	20b44 <alt_epcs_flash_init+0x134>
  }
  else if (flash->silicon_id == 0x13) /* EPCS8 */
   20a70:	008004c4 	movi	r2,19
   20a74:	1880041e 	bne	r3,r2,20a88 <alt_epcs_flash_init+0x78>
  {
    flash->dev.region_info[0].region_size = 8 * 1024 * 1024 / 8;
   20a78:	00800434 	movhi	r2,16
   20a7c:	80800e15 	stw	r2,56(r16)
    flash->dev.region_info[0].number_of_blocks = 16;
   20a80:	00800404 	movi	r2,16
   20a84:	003ff606 	br	20a60 <alt_epcs_flash_init+0x50>
    flash->dev.region_info[0].block_size = 65536;
  }
  else if (flash->silicon_id == 0x12) /* EPCS4 */
   20a88:	00800484 	movi	r2,18
   20a8c:	1880041e 	bne	r3,r2,20aa0 <alt_epcs_flash_init+0x90>
  {
    flash->dev.region_info[0].region_size = 4 * 1024 * 1024 / 8;
   20a90:	00800234 	movhi	r2,8
   20a94:	80800e15 	stw	r2,56(r16)
    flash->dev.region_info[0].number_of_blocks = 8;
   20a98:	00800204 	movi	r2,8
   20a9c:	003ff006 	br	20a60 <alt_epcs_flash_init+0x50>
    flash->dev.region_info[0].block_size = 65536;
  }
  else if (flash->silicon_id == 0x10) /* EPCS1 */
   20aa0:	00800404 	movi	r2,16
   20aa4:	1880061e 	bne	r3,r2,20ac0 <alt_epcs_flash_init+0xb0>
  {
    flash->dev.region_info[0].region_size = 1 * 1024 * 1024 / 8;
   20aa8:	008000b4 	movhi	r2,2
   20aac:	80800e15 	stw	r2,56(r16)
    flash->dev.region_info[0].number_of_blocks = 4;
   20ab0:	00800104 	movi	r2,4
   20ab4:	80800f15 	stw	r2,60(r16)
    flash->dev.region_info[0].block_size = 32768;
   20ab8:	00a00014 	movui	r2,32768
   20abc:	003fea06 	br	20a68 <alt_epcs_flash_init+0x58>
  {
    /* 
     * Read electronic signature doesn't work for the EPCS128; try 
     * the "Read Device ID" command" before giving up.
     */
    flash->silicon_id = epcs_read_device_id(flash->register_base);
   20ac0:	81002d17 	ldw	r4,180(r16)
   20ac4:	00215180 	call	21518 <epcs_read_device_id>
   20ac8:	1009883a 	mov	r4,r2
    /*
     * Last byte is the density ID. Note the difference between
     * EPCS128 and EPCQ128 -- arranged differently, though the 
     * least significant byte of each is '0x18'.
     */
    if((flash->silicon_id & 0xFFFFFF) == 0x20BA18) /* EPCQ128 */
   20acc:	00804034 	movhi	r2,256
   20ad0:	10bfffc4 	addi	r2,r2,-1
   20ad4:	2084703a 	and	r2,r4,r2
   20ad8:	00c00874 	movhi	r3,33
   20adc:	18ee8604 	addi	r3,r3,-17896
  {
    /* 
     * Read electronic signature doesn't work for the EPCS128; try 
     * the "Read Device ID" command" before giving up.
     */
    flash->silicon_id = epcs_read_device_id(flash->register_base);
   20ae0:	81002f15 	stw	r4,188(r16)
    /*
     * Last byte is the density ID. Note the difference between
     * EPCS128 and EPCQ128 -- arranged differently, though the 
     * least significant byte of each is '0x18'.
     */
    if((flash->silicon_id & 0xFFFFFF) == 0x20BA18) /* EPCQ128 */
   20ae4:	10c0041e 	bne	r2,r3,20af8 <alt_epcs_flash_init+0xe8>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
   20ae8:	00804034 	movhi	r2,256
   20aec:	80800e15 	stw	r2,56(r16)
      flash->dev.region_info[0].number_of_blocks = 256; /* number of sectors */
   20af0:	00804004 	movi	r2,256
   20af4:	003fda06 	br	20a60 <alt_epcs_flash_init+0x50>
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
    }
    else if((flash->silicon_id & 0xFF) == 0x18) /* EPCS128 */
   20af8:	20c03fcc 	andi	r3,r4,255
   20afc:	00800604 	movi	r2,24
   20b00:	1880061e 	bne	r3,r2,20b1c <alt_epcs_flash_init+0x10c>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
   20b04:	00804034 	movhi	r2,256
   20b08:	80800e15 	stw	r2,56(r16)
      flash->dev.region_info[0].number_of_blocks = 64;
   20b0c:	00801004 	movi	r2,64
   20b10:	80800f15 	stw	r2,60(r16)
      flash->dev.region_info[0].block_size = 262144;
   20b14:	00800134 	movhi	r2,4
   20b18:	003fd306 	br	20a68 <alt_epcs_flash_init+0x58>
    }
    else if((flash->silicon_id & 0xFF ) == 0x19) /* EPCQ256 */
   20b1c:	00800644 	movi	r2,25
   20b20:	1880161e 	bne	r3,r2,20b7c <alt_epcs_flash_init+0x16c>
    {
      flash->dev.region_info[0].region_size = 256 * 1024 * 1024 / 8;
   20b24:	00808034 	movhi	r2,512
   20b28:	80800e15 	stw	r2,56(r16)
      flash->dev.region_info[0].number_of_blocks = 512; /* number of sectors */
   20b2c:	00808004 	movi	r2,512
   20b30:	80800f15 	stw	r2,60(r16)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
   20b34:	00800074 	movhi	r2,1
   20b38:	80801015 	stw	r2,64(r16)
       * must first be programmed into the device, though. To complicate things, 
       * other Altera IP expects the chip to be in 3 byte address mode when they 
       * start using it. To be nice, we'll place the device into 4-byte address mode
       * when we need to, and take it back out when we're done.
       */
      flash->four_bytes_mode = 1;
   20b3c:	00800044 	movi	r2,1
   20b40:	80803115 	stw	r2,196(r16)
    {
      ret_code = -ENODEV; /* No known device found! */
    }
  }
  
  flash->size_in_bytes = flash->dev.region_info[0].region_size;
   20b44:	80800e17 	ldw	r2,56(r16)

static ALT_INLINE int alt_flash_device_register( alt_flash_fd* fd)
{
  extern alt_llist alt_flash_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) fd, &alt_flash_dev_list);
   20b48:	8009883a 	mov	r4,r16
   20b4c:	014000b4 	movhi	r5,2
   20b50:	29502604 	addi	r5,r5,16536
   20b54:	80802e15 	stw	r2,184(r16)
  flash->dev.number_of_regions = 1;
   20b58:	00800044 	movi	r2,1
   20b5c:	80800c15 	stw	r2,48(r16)
  flash->dev.region_info[0].offset = 0;
  flash->page_size = 256;
   20b60:	00804004 	movi	r2,256
   20b64:	80803015 	stw	r2,192(r16)
    }
  }
  
  flash->size_in_bytes = flash->dev.region_info[0].region_size;
  flash->dev.number_of_regions = 1;
  flash->dev.region_info[0].offset = 0;
   20b68:	80000d15 	stw	zero,52(r16)
  */
  if (!ret_code)
    ret_code = alt_flash_device_register(&(flash->dev));

  return ret_code;
}
   20b6c:	dfc00117 	ldw	ra,4(sp)
   20b70:	dc000017 	ldw	r16,0(sp)
   20b74:	dec00204 	addi	sp,sp,8
   20b78:	0021ba41 	jmpi	21ba4 <alt_dev_llist_insert>
    {
      ret_code = -ENODEV; /* No known device found! */
    }
  }
  
  flash->size_in_bytes = flash->dev.region_info[0].region_size;
   20b7c:	80800e17 	ldw	r2,56(r16)
  flash->dev.number_of_regions = 1;
  flash->dev.region_info[0].offset = 0;
  flash->page_size = 256;
   20b80:	00c04004 	movi	r3,256
   20b84:	80c03015 	stw	r3,192(r16)
    {
      ret_code = -ENODEV; /* No known device found! */
    }
  }
  
  flash->size_in_bytes = flash->dev.region_info[0].region_size;
   20b88:	80802e15 	stw	r2,184(r16)
  flash->dev.number_of_regions = 1;
   20b8c:	00800044 	movi	r2,1
   20b90:	80800c15 	stw	r2,48(r16)
  */
  if (!ret_code)
    ret_code = alt_flash_device_register(&(flash->dev));

  return ret_code;
}
   20b94:	00bffb44 	movi	r2,-19
    }
  }
  
  flash->size_in_bytes = flash->dev.region_info[0].region_size;
  flash->dev.number_of_regions = 1;
  flash->dev.region_info[0].offset = 0;
   20b98:	80000d15 	stw	zero,52(r16)
  */
  if (!ret_code)
    ret_code = alt_flash_device_register(&(flash->dev));

  return ret_code;
}
   20b9c:	dfc00117 	ldw	ra,4(sp)
   20ba0:	dc000017 	ldw	r16,0(sp)
   20ba4:	dec00204 	addi	sp,sp,8
   20ba8:	f800283a 	ret

00020bac <altera_avalon_jtag_uart_ioctl_fd>:
int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   20bac:	21000017 	ldw	r4,0(r4)
   20bb0:	21000a04 	addi	r4,r4,40
   20bb4:	0020dd81 	jmpi	20dd8 <altera_avalon_jtag_uart_ioctl>

00020bb8 <altera_avalon_jtag_uart_close_fd>:
int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   20bb8:	20800017 	ldw	r2,0(r4)
   20bbc:	21400217 	ldw	r5,8(r4)
   20bc0:	11000a04 	addi	r4,r2,40
   20bc4:	0020be81 	jmpi	20be8 <altera_avalon_jtag_uart_close>

00020bc8 <altera_avalon_jtag_uart_write_fd>:
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   20bc8:	20800017 	ldw	r2,0(r4)
   20bcc:	21c00217 	ldw	r7,8(r4)
   20bd0:	11000a04 	addi	r4,r2,40
   20bd4:	0020fac1 	jmpi	20fac <altera_avalon_jtag_uart_write>

00020bd8 <altera_avalon_jtag_uart_read_fd>:
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   20bd8:	20800017 	ldw	r2,0(r4)
   20bdc:	21c00217 	ldw	r7,8(r4)
   20be0:	11000a04 	addi	r4,r2,40
   20be4:	0020e541 	jmpi	20e54 <altera_avalon_jtag_uart_read>

00020be8 <altera_avalon_jtag_uart_close>:
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   20be8:	21800c17 	ldw	r6,48(r4)
   20bec:	2950000c 	andi	r5,r5,16384
   20bf0:	280b003a 	cmpeq	r5,r5,zero
   20bf4:	00000306 	br	20c04 <altera_avalon_jtag_uart_close+0x1c>
    if (flags & O_NONBLOCK) {
   20bf8:	2800021e 	bne	r5,zero,20c04 <altera_avalon_jtag_uart_close+0x1c>
   20bfc:	00bffd44 	movi	r2,-11
   20c00:	f800283a 	ret
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   20c04:	20800d17 	ldw	r2,52(r4)
   20c08:	11800326 	beq	r2,r6,20c18 <altera_avalon_jtag_uart_close+0x30>
   20c0c:	20c00917 	ldw	r3,36(r4)
   20c10:	20800117 	ldw	r2,4(r4)
   20c14:	18bff836 	bltu	r3,r2,20bf8 <altera_avalon_jtag_uart_close+0x10>
   20c18:	0005883a 	mov	r2,zero
      return -EWOULDBLOCK; 
    }
  }

  return 0;
}
   20c1c:	f800283a 	ret

00020c20 <altera_avalon_jtag_uart_timeout>:
static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   20c20:	20c00017 	ldw	r3,0(r4)
   20c24:	18800137 	ldwio	r2,4(r3)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   20c28:	1081000c 	andi	r2,r2,1024
   20c2c:	10000526 	beq	r2,zero,20c44 <altera_avalon_jtag_uart_timeout+0x24>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   20c30:	20800817 	ldw	r2,32(r4)
   20c34:	10810014 	ori	r2,r2,1024
   20c38:	18800135 	stwio	r2,4(r3)
    sp->host_inactive = 0;
   20c3c:	20000915 	stw	zero,36(r4)
   20c40:	00000606 	br	20c5c <altera_avalon_jtag_uart_timeout+0x3c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   20c44:	20c00917 	ldw	r3,36(r4)
   20c48:	00a00034 	movhi	r2,32768
   20c4c:	10bfff04 	addi	r2,r2,-4
    sp->host_inactive++;
   20c50:	19400044 	addi	r5,r3,1
  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    sp->host_inactive = 0;
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   20c54:	10c00136 	bltu	r2,r3,20c5c <altera_avalon_jtag_uart_timeout+0x3c>
    sp->host_inactive++;
   20c58:	21400915 	stw	r5,36(r4)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   20c5c:	008000b4 	movhi	r2,2
   20c60:	10903904 	addi	r2,r2,16612
   20c64:	10800017 	ldw	r2,0(r2)
   20c68:	f800283a 	ret

00020c6c <altera_avalon_jtag_uart_init>:
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   20c6c:	20c00017 	ldw	r3,0(r4)
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   20c70:	defffd04 	addi	sp,sp,-12
   20c74:	dc000115 	stw	r16,4(sp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   20c78:	00800044 	movi	r2,1
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   20c7c:	2021883a 	mov	r16,r4
   20c80:	dfc00215 	stw	ra,8(sp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   20c84:	20800815 	stw	r2,32(r4)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   20c88:	18800135 	stwio	r2,4(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   20c8c:	2809883a 	mov	r4,r5
   20c90:	800f883a 	mov	r7,r16
   20c94:	300b883a 	mov	r5,r6
   20c98:	018000b4 	movhi	r6,2
   20c9c:	31833b04 	addi	r6,r6,3308
   20ca0:	d8000015 	stw	zero,0(sp)
   20ca4:	0021d8c0 	call	21d8c <alt_ic_isr_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   20ca8:	008000b4 	movhi	r2,2
   20cac:	10903904 	addi	r2,r2,16612
   20cb0:	11400017 	ldw	r5,0(r2)
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   20cb4:	80000915 	stw	zero,36(r16)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   20cb8:	81000204 	addi	r4,r16,8
   20cbc:	018000b4 	movhi	r6,2
   20cc0:	31830804 	addi	r6,r6,3104
   20cc4:	800f883a 	mov	r7,r16
   20cc8:	0021a540 	call	21a54 <alt_alarm_start>
   20ccc:	1000030e 	bge	r2,zero,20cdc <altera_avalon_jtag_uart_init+0x70>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   20cd0:	00a00034 	movhi	r2,32768
   20cd4:	10bfffc4 	addi	r2,r2,-1
   20cd8:	80800115 	stw	r2,4(r16)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   20cdc:	dfc00217 	ldw	ra,8(sp)
   20ce0:	dc000117 	ldw	r16,4(sp)
   20ce4:	dec00304 	addi	sp,sp,12
   20ce8:	f800283a 	ret

00020cec <altera_avalon_jtag_uart_irq>:
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  unsigned int base = sp->base;
   20cec:	22000017 	ldw	r8,0(r4)
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   20cf0:	200b883a 	mov	r5,r4
   20cf4:	41800104 	addi	r6,r8,4
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   20cf8:	31c00037 	ldwio	r7,0(r6)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   20cfc:	3880c00c 	andi	r2,r7,768
   20d00:	10003426 	beq	r2,zero,20dd4 <altera_avalon_jtag_uart_irq+0xe8>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   20d04:	3880400c 	andi	r2,r7,256
   20d08:	10001926 	beq	r2,zero,20d70 <altera_avalon_jtag_uart_irq+0x84>
   20d0c:	2a400b17 	ldw	r9,44(r5)
   20d10:	01000074 	movhi	r4,1
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   20d14:	28800a17 	ldw	r2,40(r5)
        if (next == sp->rx_out)
   20d18:	10800044 	addi	r2,r2,1
   20d1c:	1081ffcc 	andi	r2,r2,2047
   20d20:	12400b26 	beq	r2,r9,20d50 <altera_avalon_jtag_uart_irq+0x64>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   20d24:	41000037 	ldwio	r4,0(r8)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   20d28:	20a0000c 	andi	r2,r4,32768
   20d2c:	10000826 	beq	r2,zero,20d50 <altera_avalon_jtag_uart_irq+0x64>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   20d30:	28c00a17 	ldw	r3,40(r5)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   20d34:	28800a17 	ldw	r2,40(r5)
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   20d38:	1947883a 	add	r3,r3,r5
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   20d3c:	10800044 	addi	r2,r2,1
   20d40:	1081ffcc 	andi	r2,r2,2047
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   20d44:	19000e05 	stb	r4,56(r3)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   20d48:	28800a15 	stw	r2,40(r5)
   20d4c:	003ff106 	br	20d14 <altera_avalon_jtag_uart_irq+0x28>

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   20d50:	20bfffec 	andhi	r2,r4,65535
   20d54:	10000626 	beq	r2,zero,20d70 <altera_avalon_jtag_uart_irq+0x84>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   20d58:	28800817 	ldw	r2,32(r5)
   20d5c:	00ffff84 	movi	r3,-2
   20d60:	10c4703a 	and	r2,r2,r3
   20d64:	28800815 	stw	r2,32(r5)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   20d68:	30800035 	stwio	r2,0(r6)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   20d6c:	30800037 	ldwio	r2,0(r6)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   20d70:	3880800c 	andi	r2,r7,512
   20d74:	103fe026 	beq	r2,zero,20cf8 <altera_avalon_jtag_uart_irq+0xc>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   20d78:	3808d43a 	srli	r4,r7,16
   20d7c:	00000906 	br	20da4 <altera_avalon_jtag_uart_irq+0xb8>

      while (space > 0 && sp->tx_out != sp->tx_in)
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   20d80:	28800d17 	ldw	r2,52(r5)
   20d84:	1145883a 	add	r2,r2,r5
   20d88:	10820e07 	ldb	r2,2104(r2)
   20d8c:	40800035 	stwio	r2,0(r8)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   20d90:	28800d17 	ldw	r2,52(r5)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   20d94:	213fffc4 	addi	r4,r4,-1

      while (space > 0 && sp->tx_out != sp->tx_in)
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   20d98:	10800044 	addi	r2,r2,1
   20d9c:	1081ffcc 	andi	r2,r2,2047
   20da0:	28800d15 	stw	r2,52(r5)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   20da4:	203fd426 	beq	r4,zero,20cf8 <altera_avalon_jtag_uart_irq+0xc>
   20da8:	28c00d17 	ldw	r3,52(r5)
   20dac:	28800c17 	ldw	r2,48(r5)
   20db0:	18bff31e 	bne	r3,r2,20d80 <altera_avalon_jtag_uart_irq+0x94>
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   20db4:	28800817 	ldw	r2,32(r5)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   20db8:	29000017 	ldw	r4,0(r5)
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   20dbc:	00ffff44 	movi	r3,-3
   20dc0:	10c4703a 	and	r2,r2,r3
   20dc4:	28800815 	stw	r2,32(r5)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   20dc8:	20800135 	stwio	r2,4(r4)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   20dcc:	30800037 	ldwio	r2,0(r6)
   20dd0:	003fc906 	br	20cf8 <altera_avalon_jtag_uart_irq+0xc>
   20dd4:	f800283a 	ret

00020dd8 <altera_avalon_jtag_uart_ioctl>:
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  int rc = -ENOTTY;

  switch (req)
   20dd8:	009a8044 	movi	r2,27137
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   20ddc:	200f883a 	mov	r7,r4
  int rc = -ENOTTY;

  switch (req)
   20de0:	28800326 	beq	r5,r2,20df0 <altera_avalon_jtag_uart_ioctl+0x18>
   20de4:	009a8084 	movi	r2,27138
   20de8:	2880171e 	bne	r5,r2,20e48 <altera_avalon_jtag_uart_ioctl+0x70>
   20dec:	00000d06 	br	20e24 <altera_avalon_jtag_uart_ioctl+0x4c>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   20df0:	20c00117 	ldw	r3,4(r4)
   20df4:	00a00034 	movhi	r2,32768
   20df8:	10bfffc4 	addi	r2,r2,-1
   20dfc:	18801226 	beq	r3,r2,20e48 <altera_avalon_jtag_uart_ioctl+0x70>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   20e00:	31800017 	ldw	r6,0(r6)
   20e04:	10bfff44 	addi	r2,r2,-3
   20e08:	30ffff84 	addi	r3,r6,-2
   20e0c:	10c0022e 	bgeu	r2,r3,20e18 <altera_avalon_jtag_uart_ioctl+0x40>
   20e10:	01a00034 	movhi	r6,32768
   20e14:	31bfff84 	addi	r6,r6,-2
   20e18:	0007883a 	mov	r3,zero
   20e1c:	39800115 	stw	r6,4(r7)
   20e20:	00000a06 	br	20e4c <altera_avalon_jtag_uart_ioctl+0x74>
    }
    break;

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   20e24:	21000117 	ldw	r4,4(r4)
   20e28:	00a00034 	movhi	r2,32768
   20e2c:	10bfffc4 	addi	r2,r2,-1
   20e30:	20800526 	beq	r4,r2,20e48 <altera_avalon_jtag_uart_ioctl+0x70>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   20e34:	38800917 	ldw	r2,36(r7)
   20e38:	0007883a 	mov	r3,zero
   20e3c:	1105803a 	cmpltu	r2,r2,r4
   20e40:	30800015 	stw	r2,0(r6)
   20e44:	00000106 	br	20e4c <altera_avalon_jtag_uart_ioctl+0x74>
   20e48:	00fff9c4 	movi	r3,-25
  default:
    break;
  }

  return rc;
}
   20e4c:	1805883a 	mov	r2,r3
   20e50:	f800283a 	ret

00020e54 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   20e54:	defff604 	addi	sp,sp,-40
   20e58:	df000815 	stw	fp,32(sp)
   20e5c:	ddc00715 	stw	r23,28(sp)
   20e60:	dd400515 	stw	r21,20(sp)
   20e64:	dcc00315 	stw	r19,12(sp)
   20e68:	282f883a 	mov	r23,r5
   20e6c:	2027883a 	mov	r19,r4
   20e70:	302b883a 	mov	r21,r6
   20e74:	3839883a 	mov	fp,r7
   20e78:	dfc00915 	stw	ra,36(sp)
   20e7c:	dd800615 	stw	r22,24(sp)
   20e80:	dd000415 	stw	r20,16(sp)
   20e84:	dc800215 	stw	r18,8(sp)
   20e88:	dc400115 	stw	r17,4(sp)
   20e8c:	dc000015 	stw	r16,0(sp)
   20e90:	00001e06 	br	20f0c <altera_avalon_jtag_uart_read+0xb8>
   20e94:	b829883a 	mov	r20,r23

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
      out = sp->rx_out;
   20e98:	9c400b17 	ldw	r17,44(r19)
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   20e9c:	9d800a17 	ldw	r22,40(r19)
      out = sp->rx_out;

      if (in >= out)
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   20ea0:	00820004 	movi	r2,2048
   20ea4:	1461c83a 	sub	r16,r2,r17
    do
    {
      in  = sp->rx_in;
      out = sp->rx_out;

      if (in >= out)
   20ea8:	b4400136 	bltu	r22,r17,20eb0 <altera_avalon_jtag_uart_read+0x5c>
        n = in - out;
   20eac:	b461c83a 	sub	r16,r22,r17
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
   20eb0:	a009883a 	mov	r4,r20
   20eb4:	800d883a 	mov	r6,r16
      if (in >= out)
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
   20eb8:	80000a26 	beq	r16,zero,20ee4 <altera_avalon_jtag_uart_read+0x90>
   20ebc:	99400e04 	addi	r5,r19,56
        break; /* No more data available */

      if (n > space)
   20ec0:	ac001936 	bltu	r21,r16,20f28 <altera_avalon_jtag_uart_read+0xd4>
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
   20ec4:	2c4b883a 	add	r5,r5,r17
   20ec8:	00224840 	call	22484 <memcpy>
      ptr   += n;
      space -= n;

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   20ecc:	8c05883a 	add	r2,r17,r16
   20ed0:	1081ffcc 	andi	r2,r2,2047
      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
      ptr   += n;
      space -= n;
   20ed4:	ac2bc83a 	sub	r21,r21,r16

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   20ed8:	98800b15 	stw	r2,44(r19)

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
      ptr   += n;
   20edc:	a429883a 	add	r20,r20,r16
      space -= n;

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);
   20ee0:	057fed16 	blt	zero,r21,20e98 <altera_avalon_jtag_uart_read+0x44>

    /* If we read any data then return it */
    if (ptr != buffer)
   20ee4:	a5c01a1e 	bne	r20,r23,20f50 <altera_avalon_jtag_uart_read+0xfc>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   20ee8:	e090000c 	andi	r2,fp,16384
   20eec:	10000c1e 	bne	r2,zero,20f20 <altera_avalon_jtag_uart_read+0xcc>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   20ef0:	98800a17 	ldw	r2,40(r19)
   20ef4:	b080031e 	bne	r22,r2,20f04 <altera_avalon_jtag_uart_read+0xb0>
   20ef8:	98c00917 	ldw	r3,36(r19)
   20efc:	98800117 	ldw	r2,4(r19)
   20f00:	18bffb36 	bltu	r3,r2,20ef0 <altera_avalon_jtag_uart_read+0x9c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   20f04:	98800a17 	ldw	r2,40(r19)
   20f08:	b0800326 	beq	r22,r2,20f18 <altera_avalon_jtag_uart_read+0xc4>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   20f0c:	057fe116 	blt	zero,r21,20e94 <altera_avalon_jtag_uart_read+0x40>
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
   20f10:	e090000c 	andi	r2,fp,16384
   20f14:	1000021e 	bne	r2,zero,20f20 <altera_avalon_jtag_uart_read+0xcc>
   20f18:	00bffec4 	movi	r2,-5
   20f1c:	00001706 	br	20f7c <altera_avalon_jtag_uart_read+0x128>
   20f20:	00bffd44 	movi	r2,-11
   20f24:	00001506 	br	20f7c <altera_avalon_jtag_uart_read+0x128>
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
   20f28:	a009883a 	mov	r4,r20
   20f2c:	a80d883a 	mov	r6,r21
   20f30:	2c4b883a 	add	r5,r5,r17
   20f34:	00224840 	call	22484 <memcpy>
      ptr   += n;
      space -= n;

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   20f38:	8d45883a 	add	r2,r17,r21

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
      ptr   += n;
   20f3c:	a569883a 	add	r20,r20,r21
      space -= n;

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   20f40:	1081ffcc 	andi	r2,r2,2047
      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
      ptr   += n;
      space -= n;
   20f44:	002b883a 	mov	r21,zero

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   20f48:	98800b15 	stw	r2,44(r19)
   20f4c:	003fe506 	br	20ee4 <altera_avalon_jtag_uart_read+0x90>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   20f50:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   20f54:	00bfff84 	movi	r2,-2
   20f58:	2084703a 	and	r2,r4,r2
   20f5c:	1001703a 	wrctl	status,r2

  if (ptr != buffer)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   20f60:	98800817 	ldw	r2,32(r19)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   20f64:	98c00017 	ldw	r3,0(r19)

  if (ptr != buffer)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   20f68:	10800054 	ori	r2,r2,1
   20f6c:	98800815 	stw	r2,32(r19)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   20f70:	18800135 	stwio	r2,4(r3)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   20f74:	2001703a 	wrctl	status,r4
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    return ptr - buffer;
   20f78:	a5c5c83a 	sub	r2,r20,r23
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
  else
    return -EIO;
}
   20f7c:	dfc00917 	ldw	ra,36(sp)
   20f80:	df000817 	ldw	fp,32(sp)
   20f84:	ddc00717 	ldw	r23,28(sp)
   20f88:	dd800617 	ldw	r22,24(sp)
   20f8c:	dd400517 	ldw	r21,20(sp)
   20f90:	dd000417 	ldw	r20,16(sp)
   20f94:	dcc00317 	ldw	r19,12(sp)
   20f98:	dc800217 	ldw	r18,8(sp)
   20f9c:	dc400117 	ldw	r17,4(sp)
   20fa0:	dc000017 	ldw	r16,0(sp)
   20fa4:	dec00a04 	addi	sp,sp,40
   20fa8:	f800283a 	ret

00020fac <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   20fac:	defff804 	addi	sp,sp,-32
   20fb0:	dd800615 	stw	r22,24(sp)
   20fb4:	dd400515 	stw	r21,20(sp)
   20fb8:	dd000415 	stw	r20,16(sp)
   20fbc:	dcc00315 	stw	r19,12(sp)
   20fc0:	dc400115 	stw	r17,4(sp)
   20fc4:	282b883a 	mov	r21,r5
   20fc8:	2023883a 	mov	r17,r4
   20fcc:	3027883a 	mov	r19,r6
   20fd0:	382d883a 	mov	r22,r7
   20fd4:	2829883a 	mov	r20,r5
   20fd8:	dfc00715 	stw	ra,28(sp)
   20fdc:	dc800215 	stw	r18,8(sp)
   20fe0:	dc000015 	stw	r16,0(sp)
   20fe4:	00001906 	br	2104c <altera_avalon_jtag_uart_write+0xa0>
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   20fe8:	8c800c17 	ldw	r18,48(r17)
      out = sp->tx_out;
   20fec:	89400d17 	ldw	r5,52(r17)

      if (in < out)
   20ff0:	9140032e 	bgeu	r18,r5,21000 <altera_avalon_jtag_uart_write+0x54>
        n = out - 1 - in;
   20ff4:	2c85c83a 	sub	r2,r5,r18
   20ff8:	10bfffc4 	addi	r2,r2,-1
   20ffc:	00000506 	br	21014 <altera_avalon_jtag_uart_write+0x68>
      else if (out > 0)
   21000:	28000226 	beq	r5,zero,2100c <altera_avalon_jtag_uart_write+0x60>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   21004:	00820004 	movi	r2,2048
   21008:	00000106 	br	21010 <altera_avalon_jtag_uart_write+0x64>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   2100c:	0081ffc4 	movi	r2,2047
   21010:	1485c83a 	sub	r2,r2,r18

      if (n == 0)
   21014:	10002926 	beq	r2,zero,210bc <altera_avalon_jtag_uart_write+0x110>
        break;

      if (n > count)
   21018:	9821883a 	mov	r16,r19
   2101c:	14c0012e 	bgeu	r2,r19,21024 <altera_avalon_jtag_uart_write+0x78>
   21020:	1021883a 	mov	r16,r2
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
   21024:	89020e04 	addi	r4,r17,2104
   21028:	a00b883a 	mov	r5,r20
   2102c:	2489883a 	add	r4,r4,r18
   21030:	800d883a 	mov	r6,r16
   21034:	00224840 	call	22484 <memcpy>
      ptr   += n;
      count -= n;

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   21038:	9405883a 	add	r2,r18,r16
   2103c:	1081ffcc 	andi	r2,r2,2047
   21040:	88800c15 	stw	r2,48(r17)

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
      ptr   += n;
   21044:	a429883a 	add	r20,r20,r16
      count -= n;
   21048:	9c27c83a 	sub	r19,r19,r16
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   2104c:	04ffe616 	blt	zero,r19,20fe8 <altera_avalon_jtag_uart_write+0x3c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   21050:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   21054:	00bfff84 	movi	r2,-2
   21058:	2084703a 	and	r2,r4,r2
   2105c:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   21060:	88800817 	ldw	r2,32(r17)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   21064:	88c00017 	ldw	r3,0(r17)
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   21068:	10800094 	ori	r2,r2,2
   2106c:	88800815 	stw	r2,32(r17)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   21070:	18800135 	stwio	r2,4(r3)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   21074:	2001703a 	wrctl	status,r4
   21078:	00000706 	br	21098 <altera_avalon_jtag_uart_write+0xec>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   2107c:	88800d17 	ldw	r2,52(r17)
   21080:	2880031e 	bne	r5,r2,21090 <altera_avalon_jtag_uart_write+0xe4>
   21084:	88c00917 	ldw	r3,36(r17)
   21088:	88800117 	ldw	r2,4(r17)
   2108c:	18bffb36 	bltu	r3,r2,2107c <altera_avalon_jtag_uart_write+0xd0>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   21090:	88800d17 	ldw	r2,52(r17)
   21094:	28bfed1e 	bne	r5,r2,2104c <altera_avalon_jtag_uart_write+0xa0>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   21098:	a5400226 	beq	r20,r21,210a4 <altera_avalon_jtag_uart_write+0xf8>
    return ptr - start;
   2109c:	a545c83a 	sub	r2,r20,r21
   210a0:	00001306 	br	210f0 <altera_avalon_jtag_uart_write+0x144>
  else if (flags & O_NONBLOCK)
   210a4:	b090000c 	andi	r2,r22,16384
   210a8:	10000226 	beq	r2,zero,210b4 <altera_avalon_jtag_uart_write+0x108>
   210ac:	00bffd44 	movi	r2,-11
   210b0:	00000f06 	br	210f0 <altera_avalon_jtag_uart_write+0x144>
   210b4:	00bffec4 	movi	r2,-5
   210b8:	00000d06 	br	210f0 <altera_avalon_jtag_uart_write+0x144>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   210bc:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   210c0:	00bfff84 	movi	r2,-2
   210c4:	2084703a 	and	r2,r4,r2
   210c8:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   210cc:	88800817 	ldw	r2,32(r17)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   210d0:	88c00017 	ldw	r3,0(r17)
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   210d4:	10800094 	ori	r2,r2,2
   210d8:	88800815 	stw	r2,32(r17)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   210dc:	18800135 	stwio	r2,4(r3)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   210e0:	2001703a 	wrctl	status,r4
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
   210e4:	b090000c 	andi	r2,r22,16384
   210e8:	103fe426 	beq	r2,zero,2107c <altera_avalon_jtag_uart_write+0xd0>
   210ec:	003fea06 	br	21098 <altera_avalon_jtag_uart_write+0xec>
    return ptr - start;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
  else
    return -EIO; /* Host not connected */
}
   210f0:	dfc00717 	ldw	ra,28(sp)
   210f4:	dd800617 	ldw	r22,24(sp)
   210f8:	dd400517 	ldw	r21,20(sp)
   210fc:	dd000417 	ldw	r20,16(sp)
   21100:	dcc00317 	ldw	r19,12(sp)
   21104:	dc800217 	ldw	r18,8(sp)
   21108:	dc400117 	ldw	r17,4(sp)
   2110c:	dc000017 	ldw	r16,0(sp)
   21110:	dec00804 	addi	sp,sp,32
   21114:	f800283a 	ret

00021118 <altera_avalon_uart_close_fd>:
int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
   21118:	20800017 	ldw	r2,0(r4)
   2111c:	21400217 	ldw	r5,8(r4)
   21120:	11000a04 	addi	r4,r2,40
   21124:	00211481 	jmpi	21148 <altera_avalon_uart_close>

00021128 <altera_avalon_uart_write_fd>:
int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 

    return altera_avalon_uart_write(&dev->state, buffer, space,
   21128:	20800017 	ldw	r2,0(r4)
   2112c:	21c00217 	ldw	r7,8(r4)
   21130:	11000a04 	addi	r4,r2,40
   21134:	00214141 	jmpi	21414 <altera_avalon_uart_write>

00021138 <altera_avalon_uart_read_fd>:
int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 

    return altera_avalon_uart_read(&dev->state, buffer, space,
   21138:	20800017 	ldw	r2,0(r4)
   2113c:	21c00217 	ldw	r7,8(r4)
   21140:	11000a04 	addi	r4,r2,40
   21144:	00212e01 	jmpi	212e0 <altera_avalon_uart_read>

00021148 <altera_avalon_uart_close>:
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
   21148:	20c00517 	ldw	r3,20(r4)
   2114c:	2950000c 	andi	r5,r5,16384
   21150:	280b003a 	cmpeq	r5,r5,zero
   21154:	00000306 	br	21164 <altera_avalon_uart_close+0x1c>
    if (flags & O_NONBLOCK) {
   21158:	2800021e 	bne	r5,zero,21164 <altera_avalon_uart_close+0x1c>
   2115c:	00bffd44 	movi	r2,-11
   21160:	f800283a 	ret
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
   21164:	20800417 	ldw	r2,16(r4)
   21168:	10fffb1e 	bne	r2,r3,21158 <altera_avalon_uart_close+0x10>
   2116c:	0005883a 	mov	r2,zero
      return -EWOULDBLOCK; 
    }
  }

  return 0;
}
   21170:	f800283a 	ret

00021174 <altera_avalon_uart_irq>:
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
   21174:	20800017 	ldw	r2,0(r4)
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
   21178:	200d883a 	mov	r6,r4
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
   2117c:	10c00204 	addi	r3,r2,8
   21180:	1a000037 	ldwio	r8,0(r3)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
   21184:	10000235 	stwio	zero,8(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
   21188:	18800037 	ldwio	r2,0(r3)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
   2118c:	4080200c 	andi	r2,r8,128
   21190:	10001626 	beq	r2,zero,211ec <altera_avalon_uart_irq+0x78>
{
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
   21194:	408000cc 	andi	r2,r8,3
   21198:	1000141e 	bne	r2,zero,211ec <altera_avalon_uart_irq+0x78>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
   2119c:	20800317 	ldw	r2,12(r4)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   211a0:	20800317 	ldw	r2,12(r4)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
   211a4:	21c00017 	ldw	r7,0(r4)
   211a8:	20c00317 	ldw	r3,12(r4)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   211ac:	10800044 	addi	r2,r2,1
   211b0:	10800fcc 	andi	r2,r2,63

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
   211b4:	39400037 	ldwio	r5,0(r7)

  sp->rx_end = next;
   211b8:	20800315 	stw	r2,12(r4)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   211bc:	20800317 	ldw	r2,12(r4)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
   211c0:	21000217 	ldw	r4,8(r4)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
   211c4:	1987883a 	add	r3,r3,r6
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
   211c8:	10800044 	addi	r2,r2,1
   211cc:	10800fcc 	andi	r2,r2,63

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
   211d0:	19400705 	stb	r5,28(r3)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
   211d4:	1100051e 	bne	r2,r4,211ec <altera_avalon_uart_irq+0x78>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   211d8:	30800117 	ldw	r2,4(r6)
   211dc:	00ffdfc4 	movi	r3,-129
   211e0:	10c4703a 	and	r2,r2,r3
   211e4:	30800115 	stw	r2,4(r6)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
   211e8:	38800335 	stwio	r2,12(r7)
  {
    altera_avalon_uart_rxirq(sp, status);
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
   211ec:	4081100c 	andi	r2,r8,1088
   211f0:	10002a26 	beq	r2,zero,2129c <altera_avalon_uart_irq+0x128>
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
   211f4:	30c00417 	ldw	r3,16(r6)
   211f8:	30800517 	ldw	r2,20(r6)
   211fc:	18801d26 	beq	r3,r2,21274 <altera_avalon_uart_irq+0x100>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
   21200:	30800617 	ldw	r2,24(r6)
   21204:	1080008c 	andi	r2,r2,2
   21208:	10000226 	beq	r2,zero,21214 <altera_avalon_uart_irq+0xa0>
   2120c:	4082000c 	andi	r2,r8,2048
   21210:	10001026 	beq	r2,zero,21254 <altera_avalon_uart_irq+0xe0>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
   21214:	30800417 	ldw	r2,16(r6)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
   21218:	30800417 	ldw	r2,16(r6)
   2121c:	30c00017 	ldw	r3,0(r6)
   21220:	1185883a 	add	r2,r2,r6
   21224:	10801703 	ldbu	r2,92(r2)
   21228:	18800135 	stwio	r2,4(r3)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
   2122c:	30800417 	ldw	r2,16(r6)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
   21230:	30c00117 	ldw	r3,4(r6)

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
   21234:	10800044 	addi	r2,r2,1
   21238:	30800415 	stw	r2,16(r6)
   2123c:	30800417 	ldw	r2,16(r6)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
   21240:	18c01014 	ori	r3,r3,64
   21244:	30c00115 	stw	r3,4(r6)

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
   21248:	10800fcc 	andi	r2,r2,63
   2124c:	30800415 	stw	r2,16(r6)
   21250:	00000806 	br	21274 <altera_avalon_uart_irq+0x100>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
   21254:	30800017 	ldw	r2,0(r6)
   21258:	10800237 	ldwio	r2,8(r2)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
   2125c:	1082000c 	andi	r2,r2,2048
   21260:	1000041e 	bne	r2,zero,21274 <altera_avalon_uart_irq+0x100>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
   21264:	30800117 	ldw	r2,4(r6)
   21268:	00ffefc4 	movi	r3,-65
   2126c:	10c4703a 	and	r2,r2,r3
   21270:	30800115 	stw	r2,4(r6)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
   21274:	30c00417 	ldw	r3,16(r6)
   21278:	30800517 	ldw	r2,20(r6)
   2127c:	1880041e 	bne	r3,r2,21290 <altera_avalon_uart_irq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   21280:	30800117 	ldw	r2,4(r6)
   21284:	00feefc4 	movi	r3,-1089
   21288:	10c4703a 	and	r2,r2,r3
   2128c:	30800115 	stw	r2,4(r6)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   21290:	30c00117 	ldw	r3,4(r6)
   21294:	30800017 	ldw	r2,0(r6)
   21298:	10c00335 	stwio	r3,12(r2)
   2129c:	f800283a 	ret

000212a0 <altera_avalon_uart_init>:

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
  void* base = sp->base;
   212a0:	20c00017 	ldw	r3,0(r4)
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
   212a4:	defffe04 	addi	sp,sp,-8
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
   212a8:	00832004 	movi	r2,3200
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
   212ac:	200f883a 	mov	r7,r4
   212b0:	dfc00115 	stw	ra,4(sp)
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
   212b4:	20800115 	stw	r2,4(r4)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
   212b8:	18800335 	stwio	r2,12(r3)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
   212bc:	2809883a 	mov	r4,r5
   212c0:	300b883a 	mov	r5,r6
   212c4:	018000b4 	movhi	r6,2
   212c8:	31845d04 	addi	r6,r6,4468
   212cc:	d8000015 	stw	zero,0(sp)
   212d0:	0021d8c0 	call	21d8c <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
   212d4:	dfc00117 	ldw	ra,4(sp)
   212d8:	dec00204 	addi	sp,sp,8
   212dc:	f800283a 	ret

000212e0 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
   212e0:	defffe04 	addi	sp,sp,-8
   212e4:	dc000015 	stw	r16,0(sp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
   212e8:	39d0000c 	andi	r7,r7,16384
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
   212ec:	2021883a 	mov	r16,r4
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
   212f0:	0011883a 	mov	r8,zero
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
   212f4:	dfc00115 	stw	ra,4(sp)
   212f8:	00000806 	br	2131c <altera_avalon_uart_read+0x3c>
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
    {
      count++;
      *ptr++ = sp->rx_buf[sp->rx_start];
   212fc:	20800703 	ldbu	r2,28(r4)
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
    {
      count++;
   21300:	42000044 	addi	r8,r8,1
      *ptr++ = sp->rx_buf[sp->rx_start];
   21304:	28800005 	stb	r2,0(r5)
      
      sp->rx_start = (++sp->rx_start) & ALT_AVALON_UART_BUF_MSK;
   21308:	80800217 	ldw	r2,8(r16)
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
    {
      count++;
      *ptr++ = sp->rx_buf[sp->rx_start];
   2130c:	29400044 	addi	r5,r5,1
      
      sp->rx_start = (++sp->rx_start) & ALT_AVALON_UART_BUF_MSK;
   21310:	10800044 	addi	r2,r2,1
   21314:	10800fcc 	andi	r2,r2,63
   21318:	80800215 	stw	r2,8(r16)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
   2131c:	4180040e 	bge	r8,r6,21330 <altera_avalon_uart_read+0x50>
   21320:	80800217 	ldw	r2,8(r16)
   21324:	80c00317 	ldw	r3,12(r16)
    {
      count++;
      *ptr++ = sp->rx_buf[sp->rx_start];
   21328:	1409883a 	add	r4,r2,r16
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
   2132c:	10fff31e 	bne	r2,r3,212fc <altera_avalon_uart_read+0x1c>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
   21330:	4000261e 	bne	r8,zero,213cc <altera_avalon_uart_read+0xec>
   21334:	80c00317 	ldw	r3,12(r16)
   21338:	80800217 	ldw	r2,8(r16)
   2133c:	10c02e1e 	bne	r2,r3,213f8 <altera_avalon_uart_read+0x118>
    {
      if (!block)
   21340:	38001726 	beq	r7,zero,213a0 <altera_avalon_uart_read+0xc0>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
   21344:	008000b4 	movhi	r2,2
   21348:	10902504 	addi	r2,r2,16532
   2134c:	10800017 	ldw	r2,0(r2)
   21350:	1000031e 	bne	r2,zero,21360 <altera_avalon_uart_read+0x80>
   21354:	00c000b4 	movhi	r3,2
   21358:	18d03b04 	addi	r3,r3,16620
   2135c:	00000206 	br	21368 <altera_avalon_uart_read+0x88>
   21360:	103ee83a 	callr	r2
   21364:	1007883a 	mov	r3,r2
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
   21368:	008002c4 	movi	r2,11
   2136c:	18800015 	stw	r2,0(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   21370:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   21374:	00bfff84 	movi	r2,-2
   21378:	2084703a 	and	r2,r4,r2
   2137c:	1001703a 	wrctl	status,r2
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   21380:	80800117 	ldw	r2,4(r16)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   21384:	80c00017 	ldw	r3,0(r16)
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   21388:	10802014 	ori	r2,r2,128
   2138c:	80800115 	stw	r2,4(r16)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   21390:	18800335 	stwio	r2,12(r3)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   21394:	2001703a 	wrctl	status,r4
   21398:	023ffd04 	movi	r8,-12
   2139c:	00001806 	br	21400 <altera_avalon_uart_read+0x120>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   213a0:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   213a4:	00bfff84 	movi	r2,-2
   213a8:	2084703a 	and	r2,r4,r2
   213ac:	1001703a 	wrctl	status,r2
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   213b0:	80800117 	ldw	r2,4(r16)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   213b4:	80c00017 	ldw	r3,0(r16)
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   213b8:	10802014 	ori	r2,r2,128
   213bc:	80800115 	stw	r2,4(r16)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   213c0:	18800335 	stwio	r2,12(r3)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   213c4:	2001703a 	wrctl	status,r4
   213c8:	00000b06 	br	213f8 <altera_avalon_uart_read+0x118>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   213cc:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   213d0:	00bfff84 	movi	r2,-2
   213d4:	2084703a 	and	r2,r4,r2
   213d8:	1001703a 	wrctl	status,r2
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   213dc:	80800117 	ldw	r2,4(r16)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   213e0:	80c00017 	ldw	r3,0(r16)
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   213e4:	10802014 	ori	r2,r2,128
   213e8:	80800115 	stw	r2,4(r16)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   213ec:	18800335 	stwio	r2,12(r3)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   213f0:	2001703a 	wrctl	status,r4
   213f4:	00000206 	br	21400 <altera_avalon_uart_read+0x120>
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
   213f8:	303fc81e 	bne	r6,zero,2131c <altera_avalon_uart_read+0x3c>
   213fc:	003ff306 	br	213cc <altera_avalon_uart_read+0xec>
    return ~EWOULDBLOCK;
  }
  else {
    return count;
  }
}
   21400:	4005883a 	mov	r2,r8
   21404:	dfc00117 	ldw	ra,4(sp)
   21408:	dc000017 	ldw	r16,0(sp)
   2140c:	dec00204 	addi	sp,sp,8
   21410:	f800283a 	ret

00021414 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
   21414:	defffc04 	addi	sp,sp,-16
   21418:	dc800215 	stw	r18,8(sp)
   2141c:	dc400115 	stw	r17,4(sp)
   21420:	dc000015 	stw	r16,0(sp)
   21424:	3025883a 	mov	r18,r6
   21428:	2021883a 	mov	r16,r4
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
   2142c:	39d0000c 	andi	r7,r7,16384
   21430:	3023883a 	mov	r17,r6
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
   21434:	dfc00315 	stw	ra,12(sp)
   21438:	00002506 	br	214d0 <altera_avalon_uart_write+0xbc>

  while (count)
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   2143c:	80800517 	ldw	r2,20(r16)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
   21440:	80c00417 	ldw	r3,16(r16)

  while (count)
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   21444:	10800044 	addi	r2,r2,1
   21448:	11800fcc 	andi	r6,r2,63

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
   2144c:	30c0191e 	bne	r6,r3,214b4 <altera_avalon_uart_write+0xa0>
    {
      if (no_block)
   21450:	38000c26 	beq	r7,zero,21484 <altera_avalon_uart_write+0x70>
   21454:	008000b4 	movhi	r2,2
   21458:	10902504 	addi	r2,r2,16532
   2145c:	10800017 	ldw	r2,0(r2)
   21460:	1000031e 	bne	r2,zero,21470 <altera_avalon_uart_write+0x5c>
   21464:	00c000b4 	movhi	r3,2
   21468:	18d03b04 	addi	r3,r3,16620
   2146c:	00000206 	br	21478 <altera_avalon_uart_write+0x64>
   21470:	103ee83a 	callr	r2
   21474:	1007883a 	mov	r3,r2
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
   21478:	008002c4 	movi	r2,11
   2147c:	18800015 	stw	r2,0(r3)
   21480:	00001406 	br	214d4 <altera_avalon_uart_write+0xc0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   21484:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   21488:	00bfff84 	movi	r2,-2
   2148c:	2084703a 	and	r2,r4,r2
   21490:	1001703a 	wrctl	status,r2
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   21494:	80800117 	ldw	r2,4(r16)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   21498:	80c00017 	ldw	r3,0(r16)
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   2149c:	10811014 	ori	r2,r2,1088
   214a0:	80800115 	stw	r2,4(r16)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   214a4:	18800335 	stwio	r2,12(r3)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   214a8:	2001703a 	wrctl	status,r4
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
   214ac:	80800417 	ldw	r2,16(r16)
   214b0:	30bffe26 	beq	r6,r2,214ac <altera_avalon_uart_write+0x98>

    count--;

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
   214b4:	80800517 	ldw	r2,20(r16)
   214b8:	28c00003 	ldbu	r3,0(r5)
        }
        while ((next == sp->tx_start));
      }
    }

    count--;
   214bc:	8c7fffc4 	addi	r17,r17,-1

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
   214c0:	1405883a 	add	r2,r2,r16
    sp->tx_end = next;
   214c4:	81800515 	stw	r6,20(r16)

    count--;

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
   214c8:	10c01705 	stb	r3,92(r2)
   214cc:	29400044 	addi	r5,r5,1
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
   214d0:	883fda1e 	bne	r17,zero,2143c <altera_avalon_uart_write+0x28>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   214d4:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   214d8:	00bfff84 	movi	r2,-2
   214dc:	2084703a 	and	r2,r4,r2
   214e0:	1001703a 	wrctl	status,r2
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   214e4:	80800117 	ldw	r2,4(r16)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   214e8:	80c00017 	ldw	r3,0(r16)
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   214ec:	10811014 	ori	r2,r2,1088
   214f0:	80800115 	stw	r2,4(r16)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   214f4:	18800335 	stwio	r2,12(r3)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   214f8:	2001703a 	wrctl	status,r4
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
}
   214fc:	9445c83a 	sub	r2,r18,r17
   21500:	dfc00317 	ldw	ra,12(sp)
   21504:	dc800217 	ldw	r18,8(sp)
   21508:	dc400117 	ldw	r17,4(sp)
   2150c:	dc000017 	ldw	r16,0(sp)
   21510:	dec00404 	addi	sp,sp,16
   21514:	f800283a 	ret

00021518 <epcs_read_device_id>:

  return res;
}

alt_u32 epcs_read_device_id(alt_u32 base)
{
   21518:	defffb04 	addi	sp,sp,-20
  const alt_u8 rd_id_cmd[] = {epcs_rdid};
  alt_u8 id[3];

  alt_avalon_spi_command(
   2151c:	00800044 	movi	r2,1
   21520:	d9400304 	addi	r5,sp,12
   21524:	2887883a 	add	r3,r5,r2
   21528:	100d883a 	mov	r6,r2
  return res;
}

alt_u32 epcs_read_device_id(alt_u32 base)
{
  const alt_u8 rd_id_cmd[] = {epcs_rdid};
   2152c:	00bfe7c4 	movi	r2,-97
   21530:	d8800305 	stb	r2,12(sp)
  alt_u8 id[3];

  alt_avalon_spi_command(
   21534:	000b883a 	mov	r5,zero
   21538:	d9c00304 	addi	r7,sp,12
   2153c:	008000c4 	movi	r2,3
   21540:	d8c00115 	stw	r3,4(sp)

  return res;
}

alt_u32 epcs_read_device_id(alt_u32 base)
{
   21544:	dfc00415 	stw	ra,16(sp)
  const alt_u8 rd_id_cmd[] = {epcs_rdid};
  alt_u8 id[3];

  alt_avalon_spi_command(
   21548:	d8800015 	stw	r2,0(sp)
   2154c:	d8000215 	stw	zero,8(sp)
   21550:	00221780 	call	22178 <alt_avalon_spi_command>
   21554:	d8800343 	ldbu	r2,13(sp)
   21558:	d8c00383 	ldbu	r3,14(sp)
   2155c:	d90003c3 	ldbu	r4,15(sp)
   21560:	1004943a 	slli	r2,r2,16
   21564:	1806923a 	slli	r3,r3,8
   21568:	1104b03a 	or	r2,r2,r4
    id,
    0
  );

  return (alt_u32) ((id[0] << 16) | (id[1] << 8) | id[2]);
}
   2156c:	1884b03a 	or	r2,r3,r2
   21570:	dfc00417 	ldw	ra,16(sp)
   21574:	dec00504 	addi	sp,sp,20
   21578:	f800283a 	ret

0002157c <epcs_read_electronic_signature>:
  return length;
}


alt_u8 epcs_read_electronic_signature(alt_u32 base)
{
   2157c:	defff604 	addi	sp,sp,-40
   21580:	dcc00815 	stw	r19,32(sp)
  const alt_u8 res_cmd[] = {epcs_res, 0, 0, 0};
   21584:	d8800304 	addi	r2,sp,12
   21588:	04c00044 	movi	r19,1
  return length;
}


alt_u8 epcs_read_electronic_signature(alt_u32 base)
{
   2158c:	dc400615 	stw	r17,24(sp)
   21590:	dc000515 	stw	r16,20(sp)
  const alt_u8 res_cmd[] = {epcs_res, 0, 0, 0};
   21594:	04400104 	movi	r17,4
   21598:	14e1883a 	add	r16,r2,r19
  return length;
}


alt_u8 epcs_read_electronic_signature(alt_u32 base)
{
   2159c:	dc800715 	stw	r18,28(sp)
  const alt_u8 res_cmd[] = {epcs_res, 0, 0, 0};
   215a0:	880d883a 	mov	r6,r17
  return length;
}


alt_u8 epcs_read_electronic_signature(alt_u32 base)
{
   215a4:	2025883a 	mov	r18,r4
  const alt_u8 res_cmd[] = {epcs_res, 0, 0, 0};
   215a8:	d1600104 	addi	r5,gp,-32764
   215ac:	8009883a 	mov	r4,r16
  return length;
}


alt_u8 epcs_read_electronic_signature(alt_u32 base)
{
   215b0:	dfc00915 	stw	ra,36(sp)
  const alt_u8 res_cmd[] = {epcs_res, 0, 0, 0};
   215b4:	00224840 	call	22484 <memcpy>
  alt_u8 res;

  alt_avalon_spi_command(
   215b8:	d8800304 	addi	r2,sp,12
   215bc:	800f883a 	mov	r7,r16
   215c0:	9009883a 	mov	r4,r18
   215c4:	880d883a 	mov	r6,r17
   215c8:	000b883a 	mov	r5,zero
   215cc:	dcc00015 	stw	r19,0(sp)
   215d0:	d8800115 	stw	r2,4(sp)
   215d4:	d8000215 	stw	zero,8(sp)
   215d8:	00221780 	call	22178 <alt_avalon_spi_command>
    &res,
    0
  );

  return res;
}
   215dc:	d8800303 	ldbu	r2,12(sp)
   215e0:	dfc00917 	ldw	ra,36(sp)
   215e4:	dcc00817 	ldw	r19,32(sp)
   215e8:	dc800717 	ldw	r18,28(sp)
   215ec:	dc400617 	ldw	r17,24(sp)
   215f0:	dc000517 	ldw	r16,20(sp)
   215f4:	dec00a04 	addi	sp,sp,40
   215f8:	f800283a 	ret

000215fc <epcs_write_enable>:

  return length;
}

void epcs_write_enable(alt_u32 base)
{
   215fc:	defffb04 	addi	sp,sp,-20
  const alt_u8 wren = epcs_wren;
  alt_avalon_spi_command(
   21600:	000b883a 	mov	r5,zero
   21604:	01800044 	movi	r6,1
   21608:	d9c00304 	addi	r7,sp,12
  return length;
}

void epcs_write_enable(alt_u32 base)
{
  const alt_u8 wren = epcs_wren;
   2160c:	00800184 	movi	r2,6

  return length;
}

void epcs_write_enable(alt_u32 base)
{
   21610:	dfc00415 	stw	ra,16(sp)
  const alt_u8 wren = epcs_wren;
   21614:	d8800305 	stb	r2,12(sp)
  alt_avalon_spi_command(
   21618:	d8000015 	stw	zero,0(sp)
   2161c:	d8000115 	stw	zero,4(sp)
   21620:	d8000215 	stw	zero,8(sp)
   21624:	00221780 	call	22178 <alt_avalon_spi_command>
    &wren,
    0,
    (alt_u8*)0,
    0
  );
}
   21628:	dfc00417 	ldw	ra,16(sp)
   2162c:	dec00504 	addi	sp,sp,20
   21630:	f800283a 	ret

00021634 <epcs_exit_4_bytes_mode>:

  return;
}

void epcs_exit_4_bytes_mode(alt_u32 base)
{
   21634:	defffa04 	addi	sp,sp,-24
  const alt_u8 exit4b_cmd = epcs_dis4b;
   21638:	00bffa44 	movi	r2,-23

  return;
}

void epcs_exit_4_bytes_mode(alt_u32 base)
{
   2163c:	dfc00515 	stw	ra,20(sp)
   21640:	dc000415 	stw	r16,16(sp)
  const alt_u8 exit4b_cmd = epcs_dis4b;
   21644:	d8800305 	stb	r2,12(sp)

  return;
}

void epcs_exit_4_bytes_mode(alt_u32 base)
{
   21648:	2021883a 	mov	r16,r4
  const alt_u8 exit4b_cmd = epcs_dis4b;

  /* First, WREN */
  epcs_write_enable(base);
   2164c:	00215fc0 	call	215fc <epcs_write_enable>

  alt_avalon_spi_command(
   21650:	000b883a 	mov	r5,zero
   21654:	8009883a 	mov	r4,r16
   21658:	01800044 	movi	r6,1
   2165c:	d9c00304 	addi	r7,sp,12
   21660:	d8000015 	stw	zero,0(sp)
   21664:	d8000115 	stw	zero,4(sp)
   21668:	d8000215 	stw	zero,8(sp)
   2166c:	00221780 	call	22178 <alt_avalon_spi_command>
    (alt_u8*)0,
    0
  );

  return;
}
   21670:	dfc00517 	ldw	ra,20(sp)
   21674:	dc000417 	ldw	r16,16(sp)
   21678:	dec00604 	addi	sp,sp,24
   2167c:	f800283a 	ret

00021680 <epcs_enter_4_bytes_mode>:

  return (alt_u32) ((id[0] << 16) | (id[1] << 8) | id[2]);
}

void epcs_enter_4_bytes_mode(alt_u32 base)
{
   21680:	defffa04 	addi	sp,sp,-24
  const alt_u8 en4b_cmd = epcs_en4b;
   21684:	00bfedc4 	movi	r2,-73

  return (alt_u32) ((id[0] << 16) | (id[1] << 8) | id[2]);
}

void epcs_enter_4_bytes_mode(alt_u32 base)
{
   21688:	dfc00515 	stw	ra,20(sp)
   2168c:	dc000415 	stw	r16,16(sp)
  const alt_u8 en4b_cmd = epcs_en4b;
   21690:	d8800305 	stb	r2,12(sp)

  return (alt_u32) ((id[0] << 16) | (id[1] << 8) | id[2]);
}

void epcs_enter_4_bytes_mode(alt_u32 base)
{
   21694:	2021883a 	mov	r16,r4
  const alt_u8 en4b_cmd = epcs_en4b;

  /* First, WREN */
  epcs_write_enable(base);
   21698:	00215fc0 	call	215fc <epcs_write_enable>

  alt_avalon_spi_command(
   2169c:	000b883a 	mov	r5,zero
   216a0:	8009883a 	mov	r4,r16
   216a4:	01800044 	movi	r6,1
   216a8:	d9c00304 	addi	r7,sp,12
   216ac:	d8000015 	stw	zero,0(sp)
   216b0:	d8000115 	stw	zero,4(sp)
   216b4:	d8000215 	stw	zero,8(sp)
   216b8:	00221780 	call	22178 <alt_avalon_spi_command>
    (alt_u8*)0,
    0
  );

  return;
}
   216bc:	dfc00517 	ldw	ra,20(sp)
   216c0:	dc000417 	ldw	r16,16(sp)
   216c4:	dec00604 	addi	sp,sp,24
   216c8:	f800283a 	ret

000216cc <epcs_read_status_register>:
#include "alt_types.h"
#include "epcs_commands.h"
#include "altera_avalon_spi.h"

alt_u8 epcs_read_status_register(alt_u32 base)
{
   216cc:	defffb04 	addi	sp,sp,-20
  const alt_u8 rdsr = epcs_rdsr;
  alt_u8 status;
  alt_avalon_spi_command(
   216d0:	00c00044 	movi	r3,1
   216d4:	d8800304 	addi	r2,sp,12
   216d8:	10cf883a 	add	r7,r2,r3
#include "epcs_commands.h"
#include "altera_avalon_spi.h"

alt_u8 epcs_read_status_register(alt_u32 base)
{
  const alt_u8 rdsr = epcs_rdsr;
   216dc:	00800144 	movi	r2,5
   216e0:	d8800345 	stb	r2,13(sp)
  alt_u8 status;
  alt_avalon_spi_command(
   216e4:	180d883a 	mov	r6,r3
   216e8:	d8800304 	addi	r2,sp,12
   216ec:	000b883a 	mov	r5,zero
#include "alt_types.h"
#include "epcs_commands.h"
#include "altera_avalon_spi.h"

alt_u8 epcs_read_status_register(alt_u32 base)
{
   216f0:	dfc00415 	stw	ra,16(sp)
  const alt_u8 rdsr = epcs_rdsr;
  alt_u8 status;
  alt_avalon_spi_command(
   216f4:	d8c00015 	stw	r3,0(sp)
   216f8:	d8800115 	stw	r2,4(sp)
   216fc:	d8000215 	stw	zero,8(sp)
   21700:	00221780 	call	22178 <alt_avalon_spi_command>
    &status,
    0
  );

  return status;
}
   21704:	d8800303 	ldbu	r2,12(sp)
   21708:	dfc00417 	ldw	ra,16(sp)
   2170c:	dec00504 	addi	sp,sp,20
   21710:	f800283a 	ret

00021714 <epcs_await_wip_released>:
{
  return epcs_read_status_register(base) & 1;
}

static ALT_INLINE void epcs_await_wip_released(alt_u32 base)
{
   21714:	defffe04 	addi	sp,sp,-8
   21718:	dc000015 	stw	r16,0(sp)
   2171c:	dfc00115 	stw	ra,4(sp)
   21720:	2021883a 	mov	r16,r4
  return status;
}

static ALT_INLINE int epcs_test_wip(alt_u32 base)
{
  return epcs_read_status_register(base) & 1;
   21724:	8009883a 	mov	r4,r16
   21728:	00216cc0 	call	216cc <epcs_read_status_register>
}

static ALT_INLINE void epcs_await_wip_released(alt_u32 base)
{
  /* Wait until the WIP bit goes low. */
  while (epcs_test_wip(base))
   2172c:	1080004c 	andi	r2,r2,1
   21730:	103ffc1e 	bne	r2,zero,21724 <epcs_await_wip_released+0x10>
  {
  }
}
   21734:	dfc00117 	ldw	ra,4(sp)
   21738:	dc000017 	ldw	r16,0(sp)
   2173c:	dec00204 	addi	sp,sp,8
   21740:	f800283a 	ret

00021744 <epcs_write_buffer>:
}

/* Write a partial or full page, assuming that page has been erased */
alt_32 epcs_write_buffer(alt_u32 base, int offset, const alt_u8* src_addr, 
                         int length, alt_u32 four_bytes_mode)
{
   21744:	defff704 	addi	sp,sp,-36
  alt_u8 pp[5];
  alt_u32 cmd_len;
  
  pp[0] = epcs_pp;
   21748:	00800084 	movi	r2,2
   2174c:	d8800305 	stb	r2,12(sp)
  
  if(four_bytes_mode)
   21750:	d8800917 	ldw	r2,36(sp)
}

/* Write a partial or full page, assuming that page has been erased */
alt_32 epcs_write_buffer(alt_u32 base, int offset, const alt_u8* src_addr, 
                         int length, alt_u32 four_bytes_mode)
{
   21754:	dc800715 	stw	r18,28(sp)
   21758:	dc400615 	stw	r17,24(sp)
   2175c:	dc000515 	stw	r16,20(sp)
   21760:	3025883a 	mov	r18,r6
   21764:	dfc00815 	stw	ra,32(sp)
  
  pp[0] = epcs_pp;
  
  if(four_bytes_mode)
  {
      pp[1] = (offset >> 24) & 0xFF;
   21768:	2811d63a 	srai	r8,r5,24
}

/* Write a partial or full page, assuming that page has been erased */
alt_32 epcs_write_buffer(alt_u32 base, int offset, const alt_u8* src_addr, 
                         int length, alt_u32 four_bytes_mode)
{
   2176c:	3823883a 	mov	r17,r7
   21770:	2021883a 	mov	r16,r4
   21774:	2807d43a 	srai	r3,r5,16
   21778:	280dd23a 	srai	r6,r5,8
  alt_u8 pp[5];
  alt_u32 cmd_len;
  
  pp[0] = epcs_pp;
  
  if(four_bytes_mode)
   2177c:	10001d26 	beq	r2,zero,217f4 <epcs_write_buffer+0xb0>
  {
      pp[1] = (offset >> 24) & 0xFF;
   21780:	da000345 	stb	r8,13(sp)
      pp[2] = (offset >> 16) & 0xFF;
   21784:	d8c00385 	stb	r3,14(sp)
      pp[3] = (offset >> 8) & 0xFF;
   21788:	d98003c5 	stb	r6,15(sp)
      pp[4] = offset & 0xFF;
   2178c:	d9400405 	stb	r5,16(sp)
      cmd_len = 5;
      epcs_enter_4_bytes_mode(base);
   21790:	00216800 	call	21680 <epcs_enter_4_bytes_mode>
      pp[3] = offset & 0xFF;
      cmd_len = 4;
  }

  /* First, WREN */
  epcs_write_enable(base);
   21794:	8009883a 	mov	r4,r16
   21798:	00215fc0 	call	215fc <epcs_write_enable>

  /* Send the PP command */
  alt_avalon_spi_command(
   2179c:	d9c00304 	addi	r7,sp,12
   217a0:	8009883a 	mov	r4,r16
   217a4:	000b883a 	mov	r5,zero
   217a8:	01800144 	movi	r6,5
   217ac:	00800044 	movi	r2,1
   217b0:	d8800215 	stw	r2,8(sp)
   217b4:	d8000015 	stw	zero,0(sp)
   217b8:	d8000115 	stw	zero,4(sp)
   217bc:	00221780 	call	22178 <alt_avalon_spi_command>
    (alt_u8*)0,
    ALT_AVALON_SPI_COMMAND_MERGE
  );

  /* Send the user's buffer */
  alt_avalon_spi_command(
   217c0:	900f883a 	mov	r7,r18
   217c4:	000b883a 	mov	r5,zero
   217c8:	880d883a 	mov	r6,r17
   217cc:	8009883a 	mov	r4,r16
   217d0:	d8000015 	stw	zero,0(sp)
   217d4:	d8000115 	stw	zero,4(sp)
   217d8:	d8000215 	stw	zero,8(sp)
   217dc:	00221780 	call	22178 <alt_avalon_spi_command>
   * if the user's going to go off and ignore the flash for
   * a while, its writes could occur in parallel with user code
   * execution.  Unfortunately, I have to guard all reads/writes
   * with wip-tests, to make that happen.
   */
  epcs_await_wip_released(base);
   217e0:	8009883a 	mov	r4,r16
   217e4:	00217140 	call	21714 <epcs_await_wip_released>

  if(four_bytes_mode)
  {
    epcs_exit_4_bytes_mode(base);
   217e8:	8009883a 	mov	r4,r16
   217ec:	00216340 	call	21634 <epcs_exit_4_bytes_mode>
   217f0:	00001706 	br	21850 <epcs_write_buffer+0x10c>
      cmd_len = 5;
      epcs_enter_4_bytes_mode(base);
  }
  else
  {
      pp[1] = (offset >> 16) & 0xFF;
   217f4:	d8c00345 	stb	r3,13(sp)
      pp[2] = (offset >> 8) & 0xFF;
   217f8:	d9800385 	stb	r6,14(sp)
      pp[3] = offset & 0xFF;
   217fc:	d94003c5 	stb	r5,15(sp)
      cmd_len = 4;
  }

  /* First, WREN */
  epcs_write_enable(base);
   21800:	00215fc0 	call	215fc <epcs_write_enable>

  /* Send the PP command */
  alt_avalon_spi_command(
   21804:	000b883a 	mov	r5,zero
   21808:	8009883a 	mov	r4,r16
   2180c:	01800104 	movi	r6,4
   21810:	d9c00304 	addi	r7,sp,12
   21814:	00800044 	movi	r2,1
   21818:	d8800215 	stw	r2,8(sp)
   2181c:	d8000015 	stw	zero,0(sp)
   21820:	d8000115 	stw	zero,4(sp)
   21824:	00221780 	call	22178 <alt_avalon_spi_command>
    (alt_u8*)0,
    ALT_AVALON_SPI_COMMAND_MERGE
  );

  /* Send the user's buffer */
  alt_avalon_spi_command(
   21828:	8009883a 	mov	r4,r16
   2182c:	900f883a 	mov	r7,r18
   21830:	000b883a 	mov	r5,zero
   21834:	880d883a 	mov	r6,r17
   21838:	d8000015 	stw	zero,0(sp)
   2183c:	d8000115 	stw	zero,4(sp)
   21840:	d8000215 	stw	zero,8(sp)
   21844:	00221780 	call	22178 <alt_avalon_spi_command>
   * if the user's going to go off and ignore the flash for
   * a while, its writes could occur in parallel with user code
   * execution.  Unfortunately, I have to guard all reads/writes
   * with wip-tests, to make that happen.
   */
  epcs_await_wip_released(base);
   21848:	8009883a 	mov	r4,r16
   2184c:	00217140 	call	21714 <epcs_await_wip_released>
  {
    epcs_exit_4_bytes_mode(base);
  }

  return length;
}
   21850:	8805883a 	mov	r2,r17
   21854:	dfc00817 	ldw	ra,32(sp)
   21858:	dc800717 	ldw	r18,28(sp)
   2185c:	dc400617 	ldw	r17,24(sp)
   21860:	dc000517 	ldw	r16,20(sp)
   21864:	dec00904 	addi	sp,sp,36
   21868:	f800283a 	ret

0002186c <epcs_write_status_register>:
    0
  );
}

void epcs_write_status_register(alt_u32 base, alt_u8 value)
{
   2186c:	defffa04 	addi	sp,sp,-24
   21870:	dc000415 	stw	r16,16(sp)
  alt_u8 wrsr[2];
  
  wrsr[0] = epcs_wrsr;
  wrsr[1] = value;
   21874:	d9400345 	stb	r5,13(sp)
    0
  );
}

void epcs_write_status_register(alt_u32 base, alt_u8 value)
{
   21878:	2021883a 	mov	r16,r4
  alt_u8 wrsr[2];
  
  wrsr[0] = epcs_wrsr;
  wrsr[1] = value;

  alt_avalon_spi_command(
   2187c:	000b883a 	mov	r5,zero
   21880:	01800084 	movi	r6,2
   21884:	d9c00304 	addi	r7,sp,12

void epcs_write_status_register(alt_u32 base, alt_u8 value)
{
  alt_u8 wrsr[2];
  
  wrsr[0] = epcs_wrsr;
   21888:	00800044 	movi	r2,1
    0
  );
}

void epcs_write_status_register(alt_u32 base, alt_u8 value)
{
   2188c:	dfc00515 	stw	ra,20(sp)
  alt_u8 wrsr[2];
  
  wrsr[0] = epcs_wrsr;
   21890:	d8800305 	stb	r2,12(sp)
  wrsr[1] = value;

  alt_avalon_spi_command(
   21894:	d8000015 	stw	zero,0(sp)
   21898:	d8000115 	stw	zero,4(sp)
   2189c:	d8000215 	stw	zero,8(sp)
   218a0:	00221780 	call	22178 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
   218a4:	8009883a 	mov	r4,r16
   218a8:	00217140 	call	21714 <epcs_await_wip_released>
}
   218ac:	dfc00517 	ldw	ra,20(sp)
   218b0:	dc000417 	ldw	r16,16(sp)
   218b4:	dec00604 	addi	sp,sp,24
   218b8:	f800283a 	ret

000218bc <epcs_read_buffer>:
  }
}

alt_32 epcs_read_buffer(alt_u32 base, int offset, alt_u8 *dest_addr, int length,
                        alt_u32 four_bytes_mode)
{
   218bc:	defff704 	addi	sp,sp,-36
  alt_u8 read_command[5];
  alt_u32 cmd_len;

  read_command[0] = epcs_read;
   218c0:	008000c4 	movi	r2,3
   218c4:	d8800305 	stb	r2,12(sp)
  
  if(four_bytes_mode)
   218c8:	d8800917 	ldw	r2,36(sp)
  }
}

alt_32 epcs_read_buffer(alt_u32 base, int offset, alt_u8 *dest_addr, int length,
                        alt_u32 four_bytes_mode)
{
   218cc:	dc800715 	stw	r18,28(sp)
   218d0:	dc400615 	stw	r17,24(sp)
   218d4:	dc000515 	stw	r16,20(sp)
   218d8:	3025883a 	mov	r18,r6
   218dc:	dfc00815 	stw	ra,32(sp)

  read_command[0] = epcs_read;
  
  if(four_bytes_mode)
  {
        read_command[1] = (offset >> 24) & 0xFF;
   218e0:	2811d63a 	srai	r8,r5,24
  }
}

alt_32 epcs_read_buffer(alt_u32 base, int offset, alt_u8 *dest_addr, int length,
                        alt_u32 four_bytes_mode)
{
   218e4:	3823883a 	mov	r17,r7
   218e8:	2021883a 	mov	r16,r4
   218ec:	2807d43a 	srai	r3,r5,16
   218f0:	280dd23a 	srai	r6,r5,8
  alt_u8 read_command[5];
  alt_u32 cmd_len;

  read_command[0] = epcs_read;
  
  if(four_bytes_mode)
   218f4:	10001226 	beq	r2,zero,21940 <epcs_read_buffer+0x84>
  {
        read_command[1] = (offset >> 24) & 0xFF;
   218f8:	da000345 	stb	r8,13(sp)
        read_command[2] = (offset >> 16) & 0xFF;
   218fc:	d8c00385 	stb	r3,14(sp)
        read_command[3] = (offset >> 8) & 0xFF;
   21900:	d98003c5 	stb	r6,15(sp)
        read_command[4] = offset & 0xFF;
   21904:	d9400405 	stb	r5,16(sp)
        cmd_len = 5;
        epcs_enter_4_bytes_mode(base);
   21908:	00216800 	call	21680 <epcs_enter_4_bytes_mode>
        read_command[2] = (offset >> 8) & 0xFF;
        read_command[3] = offset & 0xFF;
        cmd_len = 4;
  }

  epcs_await_wip_released(base);
   2190c:	8009883a 	mov	r4,r16
   21910:	00217140 	call	21714 <epcs_await_wip_released>

  alt_avalon_spi_command(
   21914:	000b883a 	mov	r5,zero
   21918:	8009883a 	mov	r4,r16
   2191c:	01800144 	movi	r6,5
   21920:	d9c00304 	addi	r7,sp,12
   21924:	dc800115 	stw	r18,4(sp)
   21928:	dc400015 	stw	r17,0(sp)
   2192c:	d8000215 	stw	zero,8(sp)
   21930:	00221780 	call	22178 <alt_avalon_spi_command>
    0
  );

  if(four_bytes_mode)
  {
    epcs_exit_4_bytes_mode(base);
   21934:	8009883a 	mov	r4,r16
   21938:	00216340 	call	21634 <epcs_exit_4_bytes_mode>
   2193c:	00000c06 	br	21970 <epcs_read_buffer+0xb4>
        epcs_enter_4_bytes_mode(base);
  }
  else
  {
        read_command[1] = (offset >> 16) & 0xFF;
        read_command[2] = (offset >> 8) & 0xFF;
   21940:	d9800385 	stb	r6,14(sp)
        read_command[3] = offset & 0xFF;
   21944:	d94003c5 	stb	r5,15(sp)
        cmd_len = 5;
        epcs_enter_4_bytes_mode(base);
  }
  else
  {
        read_command[1] = (offset >> 16) & 0xFF;
   21948:	d8c00345 	stb	r3,13(sp)
        read_command[2] = (offset >> 8) & 0xFF;
        read_command[3] = offset & 0xFF;
        cmd_len = 4;
  }

  epcs_await_wip_released(base);
   2194c:	00217140 	call	21714 <epcs_await_wip_released>

  alt_avalon_spi_command(
   21950:	000b883a 	mov	r5,zero
   21954:	8009883a 	mov	r4,r16
   21958:	01800104 	movi	r6,4
   2195c:	d9c00304 	addi	r7,sp,12
   21960:	dc800115 	stw	r18,4(sp)
   21964:	dc400015 	stw	r17,0(sp)
   21968:	d8000215 	stw	zero,8(sp)
   2196c:	00221780 	call	22178 <alt_avalon_spi_command>
  {
    epcs_exit_4_bytes_mode(base);
  }

  return length;
}
   21970:	8805883a 	mov	r2,r17
   21974:	dfc00817 	ldw	ra,32(sp)
   21978:	dc800717 	ldw	r18,28(sp)
   2197c:	dc400617 	ldw	r17,24(sp)
   21980:	dc000517 	ldw	r16,20(sp)
   21984:	dec00904 	addi	sp,sp,36
   21988:	f800283a 	ret

0002198c <epcs_sector_erase>:
  {
  }
}

void epcs_sector_erase(alt_u32 base, alt_u32 offset, alt_u32 four_bytes_mode)
{
   2198c:	defff904 	addi	sp,sp,-28
   21990:	dc000515 	stw	r16,20(sp)
   21994:	dfc00615 	stw	ra,24(sp)
  alt_u8 len;
  
  if(four_bytes_mode)
  {
      se[0] = epcs_se;  /* Note: Use epcs_se for Micron EPCS256 */
      se[1] = (offset >> 24) & 0xFF;
   21998:	2810d63a 	srli	r8,r5,24
  {
  }
}

void epcs_sector_erase(alt_u32 base, alt_u32 offset, alt_u32 four_bytes_mode)
{
   2199c:	2021883a 	mov	r16,r4
   219a0:	2806d43a 	srli	r3,r5,16
   219a4:	280ed23a 	srli	r7,r5,8
  alt_u8 se[5];
  alt_u8 len;
  
  if(four_bytes_mode)
   219a8:	30001626 	beq	r6,zero,21a04 <epcs_sector_erase+0x78>
  {
      se[0] = epcs_se;  /* Note: Use epcs_se for Micron EPCS256 */
   219ac:	00bff604 	movi	r2,-40
      se[1] = (offset >> 24) & 0xFF;
   219b0:	da000345 	stb	r8,13(sp)
      se[2] = (offset >> 16) & 0xFF;
   219b4:	d8c00385 	stb	r3,14(sp)
  alt_u8 se[5];
  alt_u8 len;
  
  if(four_bytes_mode)
  {
      se[0] = epcs_se;  /* Note: Use epcs_se for Micron EPCS256 */
   219b8:	d8800305 	stb	r2,12(sp)
      se[1] = (offset >> 24) & 0xFF;
      se[2] = (offset >> 16) & 0xFF;
      se[3] = (offset >> 8) & 0xFF;
   219bc:	d9c003c5 	stb	r7,15(sp)
      se[4] = offset & 0xFF;
   219c0:	d9400405 	stb	r5,16(sp)
      len   = 5;
      epcs_enter_4_bytes_mode(base);
   219c4:	00216800 	call	21680 <epcs_enter_4_bytes_mode>
      se[3] = offset & 0xFF;
      len   = 4;
  }

  /* Execute a WREN instruction */
  epcs_write_enable(base);
   219c8:	8009883a 	mov	r4,r16
   219cc:	00215fc0 	call	215fc <epcs_write_enable>

  alt_avalon_spi_command(
   219d0:	000b883a 	mov	r5,zero
   219d4:	01800144 	movi	r6,5
   219d8:	d9c00304 	addi	r7,sp,12
   219dc:	8009883a 	mov	r4,r16
   219e0:	d8000015 	stw	zero,0(sp)
   219e4:	d8000115 	stw	zero,4(sp)
   219e8:	d8000215 	stw	zero,8(sp)
   219ec:	00221780 	call	22178 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
   219f0:	8009883a 	mov	r4,r16
   219f4:	00217140 	call	21714 <epcs_await_wip_released>

  if(four_bytes_mode)
  {
    epcs_exit_4_bytes_mode(base);
   219f8:	8009883a 	mov	r4,r16
   219fc:	00216340 	call	21634 <epcs_exit_4_bytes_mode>
   21a00:	00001006 	br	21a44 <epcs_sector_erase+0xb8>
      len   = 5;
      epcs_enter_4_bytes_mode(base);
  }
  else
  {
      se[0] = epcs_se;
   21a04:	00bff604 	movi	r2,-40
   21a08:	d8800305 	stb	r2,12(sp)
      se[1] = (offset >> 16) & 0xFF;
   21a0c:	d8c00345 	stb	r3,13(sp)
      se[2] = (offset >> 8) & 0xFF;
   21a10:	d9c00385 	stb	r7,14(sp)
      se[3] = offset & 0xFF;
   21a14:	d94003c5 	stb	r5,15(sp)
      len   = 4;
  }

  /* Execute a WREN instruction */
  epcs_write_enable(base);
   21a18:	00215fc0 	call	215fc <epcs_write_enable>

  alt_avalon_spi_command(
   21a1c:	000b883a 	mov	r5,zero
   21a20:	8009883a 	mov	r4,r16
   21a24:	01800104 	movi	r6,4
   21a28:	d9c00304 	addi	r7,sp,12
   21a2c:	d8000015 	stw	zero,0(sp)
   21a30:	d8000115 	stw	zero,4(sp)
   21a34:	d8000215 	stw	zero,8(sp)
   21a38:	00221780 	call	22178 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
   21a3c:	8009883a 	mov	r4,r16
   21a40:	00217140 	call	21714 <epcs_await_wip_released>

  if(four_bytes_mode)
  {
    epcs_exit_4_bytes_mode(base);
  }
}
   21a44:	dfc00617 	ldw	ra,24(sp)
   21a48:	dc000517 	ldw	r16,20(sp)
   21a4c:	dec00704 	addi	sp,sp,28
   21a50:	f800283a 	ret

00021a54 <alt_alarm_start>:
                     void* context)
{
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  
  if (alt_ticks_per_second ())
   21a54:	008000b4 	movhi	r2,2
   21a58:	10903904 	addi	r2,r2,16612
   21a5c:	10800017 	ldw	r2,0(r2)
   21a60:	00ffde84 	movi	r3,-134
   21a64:	10001d26 	beq	r2,zero,21adc <alt_alarm_start+0x88>
  {
    if (alarm)
   21a68:	00fffa84 	movi	r3,-22
   21a6c:	20001b26 	beq	r4,zero,21adc <alt_alarm_start+0x88>
    {
      alarm->callback = callback;
   21a70:	21800315 	stw	r6,12(r4)
      alarm->context  = context;
   21a74:	21c00515 	stw	r7,20(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   21a78:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   21a7c:	00bfff84 	movi	r2,-2
   21a80:	3084703a 	and	r2,r6,r2
   21a84:	1001703a 	wrctl	status,r2
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   21a88:	008000b4 	movhi	r2,2
   21a8c:	10903a04 	addi	r2,r2,16616
   21a90:	10c00017 	ldw	r3,0(r2)
 
      irq_context = alt_irq_disable_all ();
      
      current_nticks = alt_nticks();
      
      alarm->time = nticks + current_nticks + 1; 
   21a94:	18800044 	addi	r2,r3,1
   21a98:	2885883a 	add	r2,r5,r2
   21a9c:	20800215 	stw	r2,8(r4)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   21aa0:	10c0032e 	bgeu	r2,r3,21ab0 <alt_alarm_start+0x5c>
      {
        alarm->rollover = 1;
   21aa4:	00800044 	movi	r2,1
   21aa8:	20800405 	stb	r2,16(r4)
   21aac:	00000106 	br	21ab4 <alt_alarm_start+0x60>
      }
      else
      {
        alarm->rollover = 0;
   21ab0:	20000405 	stb	zero,16(r4)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   21ab4:	008000b4 	movhi	r2,2
   21ab8:	10902804 	addi	r2,r2,16544
  entry->next     = list->next;
   21abc:	10c00017 	ldw	r3,0(r2)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   21ac0:	20800115 	stw	r2,4(r4)
  entry->next     = list->next;
   21ac4:	20c00015 	stw	r3,0(r4)

  list->next->previous = entry;
   21ac8:	10c00017 	ldw	r3,0(r2)
  list->next           = entry;
   21acc:	11000015 	stw	r4,0(r2)
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;

  list->next->previous = entry;
   21ad0:	19000115 	stw	r4,4(r3)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   21ad4:	3001703a 	wrctl	status,r6
   21ad8:	0007883a 	mov	r3,zero
  }
  else
  {
    return -ENOTSUP;
  }
}
   21adc:	1805883a 	mov	r2,r3
   21ae0:	f800283a 	ret

00021ae4 <alt_get_errno>:
   21ae4:	008000b4 	movhi	r2,2
   21ae8:	10902504 	addi	r2,r2,16532
   21aec:	10c00017 	ldw	r3,0(r2)
}
   21af0:	008000b4 	movhi	r2,2
   21af4:	10903b04 	addi	r2,r2,16620

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
   21af8:	18000126 	beq	r3,zero,21b00 <alt_get_errno+0x1c>
   21afc:	1800683a 	jmp	r3
}
   21b00:	f800283a 	ret

00021b04 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   21b04:	defffd04 	addi	sp,sp,-12
   21b08:	dc000015 	stw	r16,0(sp)
   21b0c:	dfc00215 	stw	ra,8(sp)
   21b10:	dc400115 	stw	r17,4(sp)
   21b14:	2021883a 	mov	r16,r4
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   21b18:	20c00324 	muli	r3,r4,12
   21b1c:	20001216 	blt	r4,zero,21b68 <close+0x64>
   21b20:	008000b4 	movhi	r2,2
   21b24:	108ebe04 	addi	r2,r2,15096
   21b28:	1887883a 	add	r3,r3,r2

  if (fd)
   21b2c:	18000e26 	beq	r3,zero,21b68 <close+0x64>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   21b30:	18800017 	ldw	r2,0(r3)
   21b34:	10800417 	ldw	r2,16(r2)
   21b38:	10001026 	beq	r2,zero,21b7c <close+0x78>
   21b3c:	1809883a 	mov	r4,r3
   21b40:	103ee83a 	callr	r2
   21b44:	1023883a 	mov	r17,r2

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   21b48:	8009883a 	mov	r4,r16
   21b4c:	002206c0 	call	2206c <alt_release_fd>
    if (rval < 0)
   21b50:	0009883a 	mov	r4,zero
   21b54:	88000b0e 	bge	r17,zero,21b84 <close+0x80>
    {
      ALT_ERRNO = -rval;
   21b58:	0021ae40 	call	21ae4 <alt_get_errno>
   21b5c:	0447c83a 	sub	r3,zero,r17
   21b60:	013fffc4 	movi	r4,-1
   21b64:	00000306 	br	21b74 <close+0x70>
    }
    return 0;
  }
  else
  {
    ALT_ERRNO = EBADFD;
   21b68:	0021ae40 	call	21ae4 <alt_get_errno>
   21b6c:	013fffc4 	movi	r4,-1
   21b70:	00c01444 	movi	r3,81
   21b74:	10c00015 	stw	r3,0(r2)
   21b78:	00000206 	br	21b84 <close+0x80>

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   21b7c:	002206c0 	call	2206c <alt_release_fd>
   21b80:	0009883a 	mov	r4,zero
  else
  {
    ALT_ERRNO = EBADFD;
    return -1;
  }
}
   21b84:	2005883a 	mov	r2,r4
   21b88:	dfc00217 	ldw	ra,8(sp)
   21b8c:	dc400117 	ldw	r17,4(sp)
   21b90:	dc000017 	ldw	r16,0(sp)
   21b94:	dec00304 	addi	sp,sp,12
   21b98:	f800283a 	ret

00021b9c <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
   21b9c:	3005883a 	mov	r2,r6
   21ba0:	f800283a 	ret

00021ba4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   21ba4:	deffff04 	addi	sp,sp,-4
   21ba8:	dfc00015 	stw	ra,0(sp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   21bac:	20000326 	beq	r4,zero,21bbc <alt_dev_llist_insert+0x18>
   21bb0:	20800217 	ldw	r2,8(r4)
  list->next           = entry;
   21bb4:	000d883a 	mov	r6,zero
   21bb8:	10000c1e 	bne	r2,zero,21bec <alt_dev_llist_insert+0x48>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
   21bbc:	008000b4 	movhi	r2,2
   21bc0:	10902504 	addi	r2,r2,16532
   21bc4:	10800017 	ldw	r2,0(r2)
   21bc8:	00c000b4 	movhi	r3,2
   21bcc:	18d03b04 	addi	r3,r3,16620
   21bd0:	10000226 	beq	r2,zero,21bdc <alt_dev_llist_insert+0x38>
   21bd4:	103ee83a 	callr	r2
   21bd8:	1007883a 	mov	r3,r2
  {
    ALT_ERRNO = EINVAL;
   21bdc:	00800584 	movi	r2,22
   21be0:	01bffa84 	movi	r6,-22
   21be4:	18800015 	stw	r2,0(r3)
   21be8:	00000606 	br	21c04 <alt_dev_llist_insert+0x60>

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
   21bec:	28800017 	ldw	r2,0(r5)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   21bf0:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
   21bf4:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
   21bf8:	28800017 	ldw	r2,0(r5)
  list->next           = entry;
   21bfc:	29000015 	stw	r4,0(r5)
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;

  list->next->previous = entry;
   21c00:	11000115 	stw	r4,4(r2)
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
   21c04:	3005883a 	mov	r2,r6
   21c08:	dfc00017 	ldw	ra,0(sp)
   21c0c:	dec00104 	addi	sp,sp,4
   21c10:	f800283a 	ret

00021c14 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   21c14:	defffe04 	addi	sp,sp,-8
   21c18:	dc000015 	stw	r16,0(sp)
   21c1c:	040000b4 	movhi	r16,2
   21c20:	840a2504 	addi	r16,r16,10388
   21c24:	dfc00115 	stw	ra,4(sp)
   21c28:	00000306 	br	21c38 <_do_ctors+0x24>
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
        (*ctor) (); 
   21c2c:	80800017 	ldw	r2,0(r16)

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   21c30:	843fff04 	addi	r16,r16,-4
        (*ctor) (); 
   21c34:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   21c38:	008000b4 	movhi	r2,2
   21c3c:	108a2504 	addi	r2,r2,10388
   21c40:	80bffa2e 	bgeu	r16,r2,21c2c <_do_ctors+0x18>
        (*ctor) (); 
}
   21c44:	dfc00117 	ldw	ra,4(sp)
   21c48:	dc000017 	ldw	r16,0(sp)
   21c4c:	dec00204 	addi	sp,sp,8
   21c50:	f800283a 	ret

00021c54 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   21c54:	defffe04 	addi	sp,sp,-8
   21c58:	dc000015 	stw	r16,0(sp)
   21c5c:	040000b4 	movhi	r16,2
   21c60:	840a2504 	addi	r16,r16,10388
   21c64:	dfc00115 	stw	ra,4(sp)
   21c68:	00000306 	br	21c78 <_do_dtors+0x24>
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
        (*dtor) (); 
   21c6c:	80800017 	ldw	r2,0(r16)

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   21c70:	843fff04 	addi	r16,r16,-4
        (*dtor) (); 
   21c74:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   21c78:	008000b4 	movhi	r2,2
   21c7c:	108a2604 	addi	r2,r2,10392
   21c80:	80bffa2e 	bgeu	r16,r2,21c6c <_do_dtors+0x18>
        (*dtor) (); 
}
   21c84:	dfc00117 	ldw	ra,4(sp)
   21c88:	dc000017 	ldw	r16,0(sp)
   21c8c:	dec00204 	addi	sp,sp,8
   21c90:	f800283a 	ret

00021c94 <alt_flash_close_dev>:
  return dev;
}

void alt_flash_close_dev(alt_flash_fd* fd)
{
  if (fd && fd->close)
   21c94:	20000326 	beq	r4,zero,21ca4 <alt_flash_close_dev+0x10>
   21c98:	20800417 	ldw	r2,16(r4)
   21c9c:	10000126 	beq	r2,zero,21ca4 <alt_flash_close_dev+0x10>
  {
    fd->close(fd);
   21ca0:	1000683a 	jmp	r2
   21ca4:	f800283a 	ret

00021ca8 <alt_flash_open_dev>:
#include "priv/alt_file.h"

ALT_LLIST_HEAD(alt_flash_dev_list);

alt_flash_fd* alt_flash_open_dev(const char* name)
{
   21ca8:	defffe04 	addi	sp,sp,-8
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);
   21cac:	d1600804 	addi	r5,gp,-32736
#include "priv/alt_file.h"

ALT_LLIST_HEAD(alt_flash_dev_list);

alt_flash_fd* alt_flash_open_dev(const char* name)
{
   21cb0:	dc000015 	stw	r16,0(sp)
   21cb4:	dfc00115 	stw	ra,4(sp)
   21cb8:	2021883a 	mov	r16,r4
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);
   21cbc:	002225c0 	call	2225c <alt_find_dev>

  if ((dev) && dev->open)
   21cc0:	10000826 	beq	r2,zero,21ce4 <alt_flash_open_dev+0x3c>
   21cc4:	10c00317 	ldw	r3,12(r2)
  {
    return dev->open(dev, name);
   21cc8:	1009883a 	mov	r4,r2
   21ccc:	800b883a 	mov	r5,r16

alt_flash_fd* alt_flash_open_dev(const char* name)
{
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);

  if ((dev) && dev->open)
   21cd0:	18000426 	beq	r3,zero,21ce4 <alt_flash_open_dev+0x3c>
  {
    return dev->open(dev, name);
  }

  return dev;
}
   21cd4:	dfc00117 	ldw	ra,4(sp)
   21cd8:	dc000017 	ldw	r16,0(sp)
   21cdc:	dec00204 	addi	sp,sp,8
{
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);

  if ((dev) && dev->open)
  {
    return dev->open(dev, name);
   21ce0:	1800683a 	jmp	r3
  }

  return dev;
}
   21ce4:	dfc00117 	ldw	ra,4(sp)
   21ce8:	dc000017 	ldw	r16,0(sp)
   21cec:	dec00204 	addi	sp,sp,8
   21cf0:	f800283a 	ret

00021cf4 <alt_ic_irq_enabled>:
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   21cf4:	000530fa 	rdctl	r2,ienable
   21cf8:	00c00044 	movi	r3,1
   21cfc:	1946983a 	sll	r3,r3,r5
   21d00:	10c4703a 	and	r2,r2,r3

    return (irq_enabled & (1 << irq)) ? 1: 0;
}
   21d04:	1004c03a 	cmpne	r2,r2,zero
   21d08:	f800283a 	ret

00021d0c <alt_ic_irq_enable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   21d0c:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   21d10:	00bfff84 	movi	r2,-2
   21d14:	3084703a 	and	r2,r6,r2
   21d18:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
   21d1c:	010000b4 	movhi	r4,2
   21d20:	21103504 	addi	r4,r4,16596
   21d24:	00c00044 	movi	r3,1
   21d28:	20800017 	ldw	r2,0(r4)
   21d2c:	1946983a 	sll	r3,r3,r5
   21d30:	10c4b03a 	or	r2,r2,r3
   21d34:	20800015 	stw	r2,0(r4)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   21d38:	20800017 	ldw	r2,0(r4)
   21d3c:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   21d40:	3001703a 	wrctl	status,r6
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_enable(irq);
}
   21d44:	0005883a 	mov	r2,zero
   21d48:	f800283a 	ret

00021d4c <alt_ic_irq_disable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   21d4c:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   21d50:	00bfff84 	movi	r2,-2
   21d54:	3084703a 	and	r2,r6,r2
   21d58:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
   21d5c:	010000b4 	movhi	r4,2
   21d60:	21103504 	addi	r4,r4,16596
   21d64:	00ffff84 	movi	r3,-2
   21d68:	20800017 	ldw	r2,0(r4)
   21d6c:	1946183a 	rol	r3,r3,r5
   21d70:	10c4703a 	and	r2,r2,r3
   21d74:	20800015 	stw	r2,0(r4)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   21d78:	20800017 	ldw	r2,0(r4)
   21d7c:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   21d80:	3001703a 	wrctl	status,r6
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_disable(irq);
}
   21d84:	0005883a 	mov	r2,zero
   21d88:	f800283a 	ret

00021d8c <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   21d8c:	0021d901 	jmpi	21d90 <alt_iic_isr_register>

00021d90 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   21d90:	defffe04 	addi	sp,sp,-8
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
   21d94:	008007c4 	movi	r2,31
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   21d98:	dfc00115 	stw	ra,4(sp)
   21d9c:	dc000015 	stw	r16,0(sp)
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
   21da0:	00fffa84 	movi	r3,-22
   21da4:	11401016 	blt	r2,r5,21de8 <alt_iic_isr_register+0x58>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   21da8:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   21dac:	00bfff84 	movi	r2,-2
   21db0:	8084703a 	and	r2,r16,r2
   21db4:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
   21db8:	280490fa 	slli	r2,r5,3
   21dbc:	00c000b4 	movhi	r3,2
   21dc0:	18d03c04 	addi	r3,r3,16624
   21dc4:	10c5883a 	add	r2,r2,r3
    alt_irq[id].context = isr_context;
   21dc8:	11c00115 	stw	r7,4(r2)
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
   21dcc:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = isr_context;

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   21dd0:	30000226 	beq	r6,zero,21ddc <alt_iic_isr_register+0x4c>
   21dd4:	0021d0c0 	call	21d0c <alt_ic_irq_enable>
   21dd8:	00000106 	br	21de0 <alt_iic_isr_register+0x50>
   21ddc:	0021d4c0 	call	21d4c <alt_ic_irq_disable>
   21de0:	1007883a 	mov	r3,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   21de4:	8001703a 	wrctl	status,r16

    alt_irq_enable_all(status);
  }

  return rc; 
}
   21de8:	1805883a 	mov	r2,r3
   21dec:	dfc00117 	ldw	ra,4(sp)
   21df0:	dc000017 	ldw	r16,0(sp)
   21df4:	dec00204 	addi	sp,sp,8
   21df8:	f800283a 	ret

00021dfc <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   21dfc:	defffe04 	addi	sp,sp,-8
   21e00:	dc000015 	stw	r16,0(sp)
   21e04:	2021883a 	mov	r16,r4
  int old;

  old = open (name, flags, mode);
   21e08:	2809883a 	mov	r4,r5
   21e0c:	300b883a 	mov	r5,r6
   21e10:	380d883a 	mov	r6,r7
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   21e14:	dfc00115 	stw	ra,4(sp)
  int old;

  old = open (name, flags, mode);
   21e18:	0021ef80 	call	21ef8 <open>

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
   21e1c:	11400324 	muli	r5,r2,12
   21e20:	00c000b4 	movhi	r3,2
   21e24:	18cebe04 	addi	r3,r3,15096
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
   21e28:	1009883a 	mov	r4,r2

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
   21e2c:	28cb883a 	add	r5,r5,r3
{
  int old;

  old = open (name, flags, mode);

  if (old >= 0)
   21e30:	10000a16 	blt	r2,zero,21e5c <alt_open_fd+0x60>
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;
   21e34:	28800217 	ldw	r2,8(r5)

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
   21e38:	28c00017 	ldw	r3,0(r5)
    fd->priv     = alt_fd_list[old].priv;
   21e3c:	29400117 	ldw	r5,4(r5)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   21e40:	80800215 	stw	r2,8(r16)

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
   21e44:	80c00015 	stw	r3,0(r16)
    fd->priv     = alt_fd_list[old].priv;
   21e48:	81400115 	stw	r5,4(r16)
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
  }
} 
   21e4c:	dfc00117 	ldw	ra,4(sp)
   21e50:	dc000017 	ldw	r16,0(sp)
   21e54:	dec00204 	addi	sp,sp,8
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
   21e58:	002206c1 	jmpi	2206c <alt_release_fd>
  }
} 
   21e5c:	dfc00117 	ldw	ra,4(sp)
   21e60:	dc000017 	ldw	r16,0(sp)
   21e64:	dec00204 	addi	sp,sp,8
   21e68:	f800283a 	ret

00021e6c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   21e6c:	defffa04 	addi	sp,sp,-24
   21e70:	dcc00315 	stw	r19,12(sp)
   21e74:	dc400115 	stw	r17,4(sp)
   21e78:	dc000015 	stw	r16,0(sp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   21e7c:	04407fc4 	movi	r17,511
   21e80:	040000b4 	movhi	r16,2
   21e84:	840ec104 	addi	r16,r16,15108
   21e88:	04c00044 	movi	r19,1
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   21e8c:	dd000415 	stw	r20,16(sp)
   21e90:	dc800215 	stw	r18,8(sp)
   21e94:	3029883a 	mov	r20,r6
   21e98:	2825883a 	mov	r18,r5
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   21e9c:	980d883a 	mov	r6,r19
   21ea0:	200b883a 	mov	r5,r4
   21ea4:	880f883a 	mov	r7,r17
   21ea8:	8009883a 	mov	r4,r16
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   21eac:	dfc00515 	stw	ra,20(sp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   21eb0:	0021dfc0 	call	21dfc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   21eb4:	900b883a 	mov	r5,r18
   21eb8:	813ffd04 	addi	r4,r16,-12
   21ebc:	880f883a 	mov	r7,r17
   21ec0:	000d883a 	mov	r6,zero
   21ec4:	0021dfc0 	call	21dfc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   21ec8:	81000304 	addi	r4,r16,12
   21ecc:	a00b883a 	mov	r5,r20
   21ed0:	980d883a 	mov	r6,r19
   21ed4:	880f883a 	mov	r7,r17
}  
   21ed8:	dfc00517 	ldw	ra,20(sp)
   21edc:	dd000417 	ldw	r20,16(sp)
   21ee0:	dcc00317 	ldw	r19,12(sp)
   21ee4:	dc800217 	ldw	r18,8(sp)
   21ee8:	dc400117 	ldw	r17,4(sp)
   21eec:	dc000017 	ldw	r16,0(sp)
   21ef0:	dec00604 	addi	sp,sp,24
{
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   21ef4:	0021dfc1 	jmpi	21dfc <alt_open_fd>

00021ef8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   21ef8:	defff904 	addi	sp,sp,-28
   21efc:	dd000415 	stw	r20,16(sp)
   21f00:	2829883a 	mov	r20,r5
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   21f04:	014000b4 	movhi	r5,2
   21f08:	29502204 	addi	r5,r5,16520
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   21f0c:	dd400515 	stw	r21,20(sp)
   21f10:	dcc00315 	stw	r19,12(sp)
   21f14:	dc000015 	stw	r16,0(sp)
   21f18:	dfc00615 	stw	ra,24(sp)
   21f1c:	dc800215 	stw	r18,8(sp)
   21f20:	dc400115 	stw	r17,4(sp)
   21f24:	302b883a 	mov	r21,r6
   21f28:	2027883a 	mov	r19,r4
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   21f2c:	002225c0 	call	2225c <alt_find_dev>
   21f30:	1021883a 	mov	r16,r2
   21f34:	10000226 	beq	r2,zero,21f40 <open+0x48>
   21f38:	0025883a 	mov	r18,zero
   21f3c:	00000a06 	br	21f68 <open+0x70>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   21f40:	9809883a 	mov	r4,r19
   21f44:	00222cc0 	call	222cc <alt_find_file>
   21f48:	1021883a 	mov	r16,r2

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   21f4c:	1000051e 	bne	r2,zero,21f64 <open+0x6c>
   21f50:	047fffc4 	movi	r17,-1
   21f54:	043ffb44 	movi	r16,-19
   21f58:	00002906 	br	22000 <open+0x108>
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   21f5c:	043ffcc4 	movi	r16,-13
   21f60:	00002706 	br	22000 <open+0x108>

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   21f64:	04800044 	movi	r18,1
  {
    if ((index = alt_get_fd (dev)) < 0)
   21f68:	8009883a 	mov	r4,r16
   21f6c:	00223680 	call	22368 <alt_get_fd>
   21f70:	1023883a 	mov	r17,r2
   21f74:	10003116 	blt	r2,zero,2203c <open+0x144>
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
   21f78:	10800324 	muli	r2,r2,12
   21f7c:	014000b4 	movhi	r5,2
   21f80:	294ebe04 	addi	r5,r5,15096
   21f84:	1149883a 	add	r4,r2,r5
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   21f88:	00900034 	movhi	r2,16384
   21f8c:	10bfffc4 	addi	r2,r2,-1
   21f90:	a086703a 	and	r3,r20,r2
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   21f94:	9004c03a 	cmpne	r2,r18,zero
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   21f98:	20c00215 	stw	r3,8(r4)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   21f9c:	1000101e 	bne	r2,zero,21fe0 <open+0xe8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   21fa0:	008000b4 	movhi	r2,2
   21fa4:	10902404 	addi	r2,r2,16528
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   21fa8:	21800017 	ldw	r6,0(r4)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   21fac:	11c00017 	ldw	r7,0(r2)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   21fb0:	18900034 	orhi	r2,r3,16384
   21fb4:	20800215 	stw	r2,8(r4)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   21fb8:	2807883a 	mov	r3,r5
   21fbc:	000b883a 	mov	r5,zero
   21fc0:	18800017 	ldw	r2,0(r3)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   21fc4:	29400044 	addi	r5,r5,1
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   21fc8:	1180031e 	bne	r2,r6,21fd8 <open+0xe0>
   21fcc:	18800217 	ldw	r2,8(r3)
   21fd0:	1000010e 	bge	r2,zero,21fd8 <open+0xe0>
   21fd4:	193fe11e 	bne	r3,r4,21f5c <open+0x64>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   21fd8:	18c00304 	addi	r3,r3,12
   21fdc:	397ff82e 	bgeu	r7,r5,21fc0 <open+0xc8>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   21fe0:	80800317 	ldw	r2,12(r16)
   21fe4:	10001726 	beq	r2,zero,22044 <open+0x14c>
   21fe8:	980b883a 	mov	r5,r19
   21fec:	a00d883a 	mov	r6,r20
   21ff0:	a80f883a 	mov	r7,r21
   21ff4:	103ee83a 	callr	r2
   21ff8:	1021883a 	mov	r16,r2
    status = -ENODEV;
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   21ffc:	1000110e 	bge	r2,zero,22044 <open+0x14c>
  {
    alt_release_fd (index);  
   22000:	8809883a 	mov	r4,r17
   22004:	002206c0 	call	2206c <alt_release_fd>
   22008:	008000b4 	movhi	r2,2
   2200c:	10902504 	addi	r2,r2,16532
   22010:	10800017 	ldw	r2,0(r2)
   22014:	1000031e 	bne	r2,zero,22024 <open+0x12c>
   22018:	00c000b4 	movhi	r3,2
   2201c:	18d03b04 	addi	r3,r3,16620
   22020:	00000206 	br	2202c <open+0x134>
   22024:	103ee83a 	callr	r2
   22028:	1007883a 	mov	r3,r2
    ALT_ERRNO = -status;
   2202c:	0405c83a 	sub	r2,zero,r16
   22030:	047fffc4 	movi	r17,-1
   22034:	18800015 	stw	r2,0(r3)
   22038:	00000206 	br	22044 <open+0x14c>
   2203c:	1021883a 	mov	r16,r2
   22040:	003fef06 	br	22000 <open+0x108>
  }
  
  /* return the reference upon success */

  return index;
}
   22044:	8805883a 	mov	r2,r17
   22048:	dfc00617 	ldw	ra,24(sp)
   2204c:	dd400517 	ldw	r21,20(sp)
   22050:	dd000417 	ldw	r20,16(sp)
   22054:	dcc00317 	ldw	r19,12(sp)
   22058:	dc800217 	ldw	r18,8(sp)
   2205c:	dc400117 	ldw	r17,4(sp)
   22060:	dc000017 	ldw	r16,0(sp)
   22064:	dec00704 	addi	sp,sp,28
   22068:	f800283a 	ret

0002206c <alt_release_fd>:
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  if (fd > 2)
   2206c:	00800084 	movi	r2,2
  {
    alt_fd_list[fd].fd_flags = 0;
   22070:	20c00324 	muli	r3,r4,12
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  if (fd > 2)
   22074:	1100050e 	bge	r2,r4,2208c <alt_release_fd+0x20>
  {
    alt_fd_list[fd].fd_flags = 0;
   22078:	008000b4 	movhi	r2,2
   2207c:	108ebe04 	addi	r2,r2,15096
   22080:	1885883a 	add	r2,r3,r2
    alt_fd_list[fd].dev      = 0;
   22084:	10000015 	stw	zero,0(r2)

void alt_release_fd (int fd)
{
  if (fd > 2)
  {
    alt_fd_list[fd].fd_flags = 0;
   22088:	10000215 	stw	zero,8(r2)
   2208c:	f800283a 	ret

00022090 <alt_alarm_stop>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   22090:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   22094:	00bfff84 	movi	r2,-2
   22098:	2884703a 	and	r2,r5,r2
   2209c:	1001703a 	wrctl	status,r2
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   220a0:	20c00017 	ldw	r3,0(r4)
   220a4:	20800117 	ldw	r2,4(r4)
   220a8:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
   220ac:	20800117 	ldw	r2,4(r4)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   220b0:	21000115 	stw	r4,4(r4)
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  entry->previous->next = entry->next;
   220b4:	10c00015 	stw	r3,0(r2)
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  entry->next     = entry;
   220b8:	21000015 	stw	r4,0(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   220bc:	2801703a 	wrctl	status,r5
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  alt_llist_remove (&alarm->llist);
  alt_irq_enable_all (irq_context);
}
   220c0:	f800283a 	ret

000220c4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   220c4:	defffd04 	addi	sp,sp,-12

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   220c8:	d0a01c17 	ldw	r2,-32656(gp)
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   220cc:	dc000015 	stw	r16,0(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   220d0:	d4200a17 	ldw	r16,-32728(gp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   220d4:	10800044 	addi	r2,r2,1
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   220d8:	dfc00215 	stw	ra,8(sp)
   220dc:	dc400115 	stw	r17,4(sp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   220e0:	d0a01c15 	stw	r2,-32656(gp)
   220e4:	00001b06 	br	22154 <alt_tick+0x90>
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   220e8:	80800403 	ldbu	r2,16(r16)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  {
    next = (alt_alarm*) alarm->llist.next;
   220ec:	84400017 	ldw	r17,0(r16)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   220f0:	10000326 	beq	r2,zero,22100 <alt_tick+0x3c>
   220f4:	d0a01c17 	ldw	r2,-32656(gp)
   220f8:	1000011e 	bne	r2,zero,22100 <alt_tick+0x3c>
    {
      alarm->rollover = 0;
   220fc:	80000405 	stb	zero,16(r16)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   22100:	d0e01c17 	ldw	r3,-32656(gp)
   22104:	80800217 	ldw	r2,8(r16)
   22108:	18801136 	bltu	r3,r2,22150 <alt_tick+0x8c>
   2210c:	80800403 	ldbu	r2,16(r16)
   22110:	10000f1e 	bne	r2,zero,22150 <alt_tick+0x8c>
    {
      next_callback = alarm->callback (alarm->context);
   22114:	81000517 	ldw	r4,20(r16)
   22118:	80800317 	ldw	r2,12(r16)
   2211c:	103ee83a 	callr	r2
   22120:	1009883a 	mov	r4,r2

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   22124:	1000031e 	bne	r2,zero,22134 <alt_tick+0x70>
      {
        alt_alarm_stop (alarm);
   22128:	8009883a 	mov	r4,r16
   2212c:	00220900 	call	22090 <alt_alarm_stop>
   22130:	00000706 	br	22150 <alt_tick+0x8c>
      }
      else
      {
        alarm->time += next_callback;
   22134:	80800217 	ldw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   22138:	d0e01c17 	ldw	r3,-32656(gp)
      {
        alt_alarm_stop (alarm);
      }
      else
      {
        alarm->time += next_callback;
   2213c:	1105883a 	add	r2,r2,r4
   22140:	80800215 	stw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   22144:	10c0022e 	bgeu	r2,r3,22150 <alt_tick+0x8c>
        {
          alarm->rollover = 1;
   22148:	00800044 	movi	r2,1
   2214c:	80800405 	stb	r2,16(r16)
   22150:	8821883a 	mov	r16,r17

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   22154:	d0a00a04 	addi	r2,gp,-32728
   22158:	80bfe31e 	bne	r16,r2,220e8 <alt_tick+0x24>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
   2215c:	dfc00217 	ldw	ra,8(sp)
   22160:	dc400117 	ldw	r17,4(sp)
   22164:	dc000017 	ldw	r16,0(sp)
   22168:	dec00304 	addi	sp,sp,12
   2216c:	f800283a 	ret

00022170 <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
   22170:	000170fa 	wrctl	ienable,zero
}
   22174:	f800283a 	ret

00022178 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
   22178:	db000017 	ldw	r12,0(sp)
   2217c:	da000117 	ldw	r8,4(sp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
   22180:	00c00044 	movi	r3,1
   22184:	194a983a 	sll	r5,r3,r5

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
   22188:	dbc00217 	ldw	r15,8(sp)
  const alt_u8 * write_end = write_data + write_length;
   2218c:	399d883a 	add	r14,r7,r6
  alt_u8 * read_end = read_data + read_length;
   22190:	431b883a 	add	r13,r8,r12
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
   22194:	21400535 	stwio	r5,20(r4)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
   22198:	7880008c 	andi	r2,r15,2
   2219c:	1000021e 	bne	r2,zero,221a8 <alt_avalon_spi_command+0x30>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
   221a0:	00810004 	movi	r2,1024
   221a4:	20800335 	stwio	r2,12(r4)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
   221a8:	20800037 	ldwio	r2,0(r4)
   221ac:	180b883a 	mov	r5,r3
   221b0:	6013883a 	mov	r9,r12
   221b4:	22c00204 	addi	r11,r4,8
   221b8:	00000106 	br	221c0 <alt_avalon_spi_command+0x48>
   221bc:	000d883a 	mov	r6,zero
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
   221c0:	5a800037 	ldwio	r10,0(r11)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
   221c4:	5080100c 	andi	r2,r10,64
   221c8:	1007003a 	cmpeq	r3,r2,zero
   221cc:	1800011e 	bne	r3,zero,221d4 <alt_avalon_spi_command+0x5c>
   221d0:	2800031e 	bne	r5,zero,221e0 <alt_avalon_spi_command+0x68>
   221d4:	5080200c 	andi	r2,r10,128
   221d8:	103ff926 	beq	r2,zero,221c0 <alt_avalon_spi_command+0x48>

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
   221dc:	18000e1e 	bne	r3,zero,22218 <alt_avalon_spi_command+0xa0>
   221e0:	01400b0e 	bge	zero,r5,22210 <alt_avalon_spi_command+0x98>
    {
      credits--;
   221e4:	297fffc4 	addi	r5,r5,-1

      if (write_data < write_end)
   221e8:	3b80042e 	bgeu	r7,r14,221fc <alt_avalon_spi_command+0x84>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
   221ec:	38800003 	ldbu	r2,0(r7)
   221f0:	39c00044 	addi	r7,r7,1
   221f4:	20800135 	stwio	r2,4(r4)
   221f8:	00000506 	br	22210 <alt_avalon_spi_command+0x98>
      else if (write_zeros > 0)
   221fc:	4800021e 	bne	r9,zero,22208 <alt_avalon_spi_command+0x90>
   22200:	017f0004 	movi	r5,-1024
   22204:	00000206 	br	22210 <alt_avalon_spi_command+0x98>
      {
        write_zeros--;
   22208:	4a7fffc4 	addi	r9,r9,-1
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
   2220c:	20000135 	stwio	zero,4(r4)
      }
      else
        credits = -1024;
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
   22210:	5080200c 	andi	r2,r10,128
   22214:	103fea26 	beq	r2,zero,221c0 <alt_avalon_spi_command+0x48>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
   22218:	20800037 	ldwio	r2,0(r4)
   2221c:	29400044 	addi	r5,r5,1

      if (read_ignore > 0)
   22220:	30000326 	beq	r6,zero,22230 <alt_avalon_spi_command+0xb8>
        read_ignore--;
   22224:	31bfffc4 	addi	r6,r6,-1
      else
        *read_data++ = (alt_u8)rxdata;
      credits++;

      if (read_ignore == 0 && read_data == read_end)
   22228:	30000326 	beq	r6,zero,22238 <alt_avalon_spi_command+0xc0>
   2222c:	003fe406 	br	221c0 <alt_avalon_spi_command+0x48>
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);

      if (read_ignore > 0)
        read_ignore--;
      else
        *read_data++ = (alt_u8)rxdata;
   22230:	40800005 	stb	r2,0(r8)
   22234:	42000044 	addi	r8,r8,1
      credits++;

      if (read_ignore == 0 && read_data == read_end)
   22238:	437fe01e 	bne	r8,r13,221bc <alt_avalon_spi_command+0x44>
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
   2223c:	58800037 	ldwio	r2,0(r11)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
   22240:	1080080c 	andi	r2,r2,32
   22244:	103ffd26 	beq	r2,zero,2223c <alt_avalon_spi_command+0xc4>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
   22248:	7880004c 	andi	r2,r15,1
   2224c:	1000011e 	bne	r2,zero,22254 <alt_avalon_spi_command+0xdc>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
   22250:	20000335 	stwio	zero,12(r4)

  return read_length;
}
   22254:	6005883a 	mov	r2,r12
   22258:	f800283a 	ret

0002225c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   2225c:	defffb04 	addi	sp,sp,-20
   22260:	dcc00315 	stw	r19,12(sp)
   22264:	dc800215 	stw	r18,8(sp)
   22268:	dc400115 	stw	r17,4(sp)
   2226c:	dc000015 	stw	r16,0(sp)
   22270:	dfc00415 	stw	ra,16(sp)
  alt_dev* next = (alt_dev*) llist->next;
   22274:	2c000017 	ldw	r16,0(r5)
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   22278:	2823883a 	mov	r17,r5
   2227c:	2027883a 	mov	r19,r4
  alt_dev* next = (alt_dev*) llist->next;
  alt_32 len;

  len  = strlen(name) + 1;
   22280:	00225240 	call	22524 <strlen>
   22284:	14800044 	addi	r18,r2,1
   22288:	00000406 	br	2229c <alt_find_dev+0x40>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   2228c:	81000217 	ldw	r4,8(r16)
   22290:	00224100 	call	22410 <memcmp>
   22294:	10000526 	beq	r2,zero,222ac <alt_find_dev+0x50>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
   22298:	84000017 	ldw	r16,0(r16)
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   2229c:	980b883a 	mov	r5,r19
   222a0:	900d883a 	mov	r6,r18
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   222a4:	847ff91e 	bne	r16,r17,2228c <alt_find_dev+0x30>
   222a8:	0021883a 	mov	r16,zero
  }
  
  /* No match found */
  
  return NULL;
}
   222ac:	8005883a 	mov	r2,r16
   222b0:	dfc00417 	ldw	ra,16(sp)
   222b4:	dcc00317 	ldw	r19,12(sp)
   222b8:	dc800217 	ldw	r18,8(sp)
   222bc:	dc400117 	ldw	r17,4(sp)
   222c0:	dc000017 	ldw	r16,0(sp)
   222c4:	dec00504 	addi	sp,sp,20
   222c8:	f800283a 	ret

000222cc <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   222cc:	defffc04 	addi	sp,sp,-16
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   222d0:	008000b4 	movhi	r2,2
   222d4:	10902004 	addi	r2,r2,16512
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   222d8:	dc400115 	stw	r17,4(sp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   222dc:	14400017 	ldw	r17,0(r2)
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   222e0:	dc800215 	stw	r18,8(sp)
   222e4:	2025883a 	mov	r18,r4
   222e8:	dfc00315 	stw	ra,12(sp)
   222ec:	dc000015 	stw	r16,0(sp)
   222f0:	00001206 	br	2233c <alt_find_file+0x70>
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  {
    len = strlen(next->name);
   222f4:	8c000217 	ldw	r16,8(r17)
   222f8:	8009883a 	mov	r4,r16
   222fc:	00225240 	call	22524 <strlen>
   22300:	100d883a 	mov	r6,r2
    
    if (next->name[len-1] == '/')
   22304:	8085883a 	add	r2,r16,r2
   22308:	10bfffc7 	ldb	r2,-1(r2)
   2230c:	00c00bc4 	movi	r3,47
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   22310:	8009883a 	mov	r4,r16
   22314:	900b883a 	mov	r5,r18
 
  while (next != (alt_dev*) &alt_fs_list)
  {
    len = strlen(next->name);
    
    if (next->name[len-1] == '/')
   22318:	10c0011e 	bne	r2,r3,22320 <alt_find_file+0x54>
    {
      len -= 1;
   2231c:	31bfffc4 	addi	r6,r6,-1
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   22320:	9185883a 	add	r2,r18,r6
   22324:	10800007 	ldb	r2,0(r2)
   22328:	10c00126 	beq	r2,r3,22330 <alt_find_file+0x64>
   2232c:	1000021e 	bne	r2,zero,22338 <alt_find_file+0x6c>
   22330:	00224100 	call	22410 <memcmp>
   22334:	10000526 	beq	r2,zero,2234c <alt_find_file+0x80>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
   22338:	8c400017 	ldw	r17,0(r17)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   2233c:	008000b4 	movhi	r2,2
   22340:	10902004 	addi	r2,r2,16512
   22344:	88bfeb1e 	bne	r17,r2,222f4 <alt_find_file+0x28>
   22348:	0023883a 	mov	r17,zero
  }
  
  /* No match found */
  
  return NULL;     
}
   2234c:	8805883a 	mov	r2,r17
   22350:	dfc00317 	ldw	ra,12(sp)
   22354:	dc800217 	ldw	r18,8(sp)
   22358:	dc400117 	ldw	r17,4(sp)
   2235c:	dc000017 	ldw	r16,0(sp)
   22360:	dec00404 	addi	sp,sp,16
   22364:	f800283a 	ret

00022368 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   22368:	014000b4 	movhi	r5,2
   2236c:	294ebe04 	addi	r5,r5,15096
   22370:	0007883a 	mov	r3,zero
   22374:	01c00804 	movi	r7,32
   22378:	280d883a 	mov	r6,r5
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  {
    if (!alt_fd_list[i].dev)
   2237c:	28800017 	ldw	r2,0(r5)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   22380:	29400304 	addi	r5,r5,12
  {
    if (!alt_fd_list[i].dev)
   22384:	10000a1e 	bne	r2,zero,223b0 <alt_get_fd+0x48>
    {
      alt_fd_list[i].dev = dev;
      if (i > alt_max_fd)
   22388:	014000b4 	movhi	r5,2
   2238c:	29502404 	addi	r5,r5,16528
   22390:	28800017 	ldw	r2,0(r5)

  for (i = 0; i < ALT_MAX_FD; i++)
  {
    if (!alt_fd_list[i].dev)
    {
      alt_fd_list[i].dev = dev;
   22394:	31000015 	stw	r4,0(r6)
      if (i > alt_max_fd)
   22398:	10c00216 	blt	r2,r3,223a4 <alt_get_fd+0x3c>
   2239c:	1805883a 	mov	r2,r3
   223a0:	f800283a 	ret
      {
        alt_max_fd = i;
   223a4:	1805883a 	mov	r2,r3
   223a8:	28c00015 	stw	r3,0(r5)
   223ac:	f800283a 	ret
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   223b0:	18c00044 	addi	r3,r3,1
   223b4:	31800304 	addi	r6,r6,12
   223b8:	19fff01e 	bne	r3,r7,2237c <alt_get_fd+0x14>
   223bc:	00bffa04 	movi	r2,-24
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
}
   223c0:	f800283a 	ret

000223c4 <atexit>:
   223c4:	200b883a 	mov	r5,r4
   223c8:	000d883a 	mov	r6,zero
   223cc:	0009883a 	mov	r4,zero
   223d0:	000f883a 	mov	r7,zero
   223d4:	00225981 	jmpi	22598 <__register_exitproc>

000223d8 <exit>:
   223d8:	defffe04 	addi	sp,sp,-8
   223dc:	000b883a 	mov	r5,zero
   223e0:	dc000015 	stw	r16,0(sp)
   223e4:	dfc00115 	stw	ra,4(sp)
   223e8:	2021883a 	mov	r16,r4
   223ec:	00226d00 	call	226d0 <__call_exitprocs>
   223f0:	008000b4 	movhi	r2,2
   223f4:	10902b04 	addi	r2,r2,16556
   223f8:	11000017 	ldw	r4,0(r2)
   223fc:	20800f17 	ldw	r2,60(r4)
   22400:	10000126 	beq	r2,zero,22408 <exit+0x30>
   22404:	103ee83a 	callr	r2
   22408:	8009883a 	mov	r4,r16
   2240c:	00228800 	call	22880 <_exit>

00022410 <memcmp>:
   22410:	00c000c4 	movi	r3,3
   22414:	1980032e 	bgeu	r3,r6,22424 <memcmp+0x14>
   22418:	2144b03a 	or	r2,r4,r5
   2241c:	10c4703a 	and	r2,r2,r3
   22420:	10000f26 	beq	r2,zero,22460 <memcmp+0x50>
   22424:	31ffffc4 	addi	r7,r6,-1
   22428:	3000061e 	bne	r6,zero,22444 <memcmp+0x34>
   2242c:	00000a06 	br	22458 <memcmp+0x48>
   22430:	39ffffc4 	addi	r7,r7,-1
   22434:	00bfffc4 	movi	r2,-1
   22438:	21000044 	addi	r4,r4,1
   2243c:	29400044 	addi	r5,r5,1
   22440:	38800526 	beq	r7,r2,22458 <memcmp+0x48>
   22444:	20c00003 	ldbu	r3,0(r4)
   22448:	28800003 	ldbu	r2,0(r5)
   2244c:	18bff826 	beq	r3,r2,22430 <memcmp+0x20>
   22450:	1885c83a 	sub	r2,r3,r2
   22454:	f800283a 	ret
   22458:	0005883a 	mov	r2,zero
   2245c:	f800283a 	ret
   22460:	180f883a 	mov	r7,r3
   22464:	20c00017 	ldw	r3,0(r4)
   22468:	28800017 	ldw	r2,0(r5)
   2246c:	18bfed1e 	bne	r3,r2,22424 <memcmp+0x14>
   22470:	31bfff04 	addi	r6,r6,-4
   22474:	21000104 	addi	r4,r4,4
   22478:	29400104 	addi	r5,r5,4
   2247c:	39bff936 	bltu	r7,r6,22464 <memcmp+0x54>
   22480:	003fe806 	br	22424 <memcmp+0x14>

00022484 <memcpy>:
   22484:	01c003c4 	movi	r7,15
   22488:	2007883a 	mov	r3,r4
   2248c:	3980032e 	bgeu	r7,r6,2249c <memcpy+0x18>
   22490:	2904b03a 	or	r2,r5,r4
   22494:	108000cc 	andi	r2,r2,3
   22498:	10000926 	beq	r2,zero,224c0 <memcpy+0x3c>
   2249c:	30000626 	beq	r6,zero,224b8 <memcpy+0x34>
   224a0:	30cd883a 	add	r6,r6,r3
   224a4:	28800003 	ldbu	r2,0(r5)
   224a8:	29400044 	addi	r5,r5,1
   224ac:	18800005 	stb	r2,0(r3)
   224b0:	18c00044 	addi	r3,r3,1
   224b4:	30fffb1e 	bne	r6,r3,224a4 <memcpy+0x20>
   224b8:	2005883a 	mov	r2,r4
   224bc:	f800283a 	ret
   224c0:	3811883a 	mov	r8,r7
   224c4:	200f883a 	mov	r7,r4
   224c8:	28c00017 	ldw	r3,0(r5)
   224cc:	31bffc04 	addi	r6,r6,-16
   224d0:	38c00015 	stw	r3,0(r7)
   224d4:	28800117 	ldw	r2,4(r5)
   224d8:	38800115 	stw	r2,4(r7)
   224dc:	28c00217 	ldw	r3,8(r5)
   224e0:	38c00215 	stw	r3,8(r7)
   224e4:	28800317 	ldw	r2,12(r5)
   224e8:	29400404 	addi	r5,r5,16
   224ec:	38800315 	stw	r2,12(r7)
   224f0:	39c00404 	addi	r7,r7,16
   224f4:	41bff436 	bltu	r8,r6,224c8 <memcpy+0x44>
   224f8:	008000c4 	movi	r2,3
   224fc:	1180072e 	bgeu	r2,r6,2251c <memcpy+0x98>
   22500:	1007883a 	mov	r3,r2
   22504:	28800017 	ldw	r2,0(r5)
   22508:	31bfff04 	addi	r6,r6,-4
   2250c:	29400104 	addi	r5,r5,4
   22510:	38800015 	stw	r2,0(r7)
   22514:	39c00104 	addi	r7,r7,4
   22518:	19bffa36 	bltu	r3,r6,22504 <memcpy+0x80>
   2251c:	3807883a 	mov	r3,r7
   22520:	003fde06 	br	2249c <memcpy+0x18>

00022524 <strlen>:
   22524:	208000cc 	andi	r2,r4,3
   22528:	2011883a 	mov	r8,r4
   2252c:	1000161e 	bne	r2,zero,22588 <strlen+0x64>
   22530:	20c00017 	ldw	r3,0(r4)
   22534:	017fbff4 	movhi	r5,65279
   22538:	297fbfc4 	addi	r5,r5,-257
   2253c:	01e02074 	movhi	r7,32897
   22540:	39e02004 	addi	r7,r7,-32640
   22544:	1945883a 	add	r2,r3,r5
   22548:	11c4703a 	and	r2,r2,r7
   2254c:	00c6303a 	nor	r3,zero,r3
   22550:	1886703a 	and	r3,r3,r2
   22554:	18000c1e 	bne	r3,zero,22588 <strlen+0x64>
   22558:	280d883a 	mov	r6,r5
   2255c:	380b883a 	mov	r5,r7
   22560:	21000104 	addi	r4,r4,4
   22564:	20800017 	ldw	r2,0(r4)
   22568:	1187883a 	add	r3,r2,r6
   2256c:	1946703a 	and	r3,r3,r5
   22570:	0084303a 	nor	r2,zero,r2
   22574:	10c4703a 	and	r2,r2,r3
   22578:	103ff926 	beq	r2,zero,22560 <strlen+0x3c>
   2257c:	20800007 	ldb	r2,0(r4)
   22580:	10000326 	beq	r2,zero,22590 <strlen+0x6c>
   22584:	21000044 	addi	r4,r4,1
   22588:	20800007 	ldb	r2,0(r4)
   2258c:	103ffd1e 	bne	r2,zero,22584 <strlen+0x60>
   22590:	2205c83a 	sub	r2,r4,r8
   22594:	f800283a 	ret

00022598 <__register_exitproc>:
   22598:	defffa04 	addi	sp,sp,-24
   2259c:	008000b4 	movhi	r2,2
   225a0:	10902b04 	addi	r2,r2,16556
   225a4:	dc000015 	stw	r16,0(sp)
   225a8:	14000017 	ldw	r16,0(r2)
   225ac:	dd000415 	stw	r20,16(sp)
   225b0:	2829883a 	mov	r20,r5
   225b4:	81405217 	ldw	r5,328(r16)
   225b8:	dcc00315 	stw	r19,12(sp)
   225bc:	dc800215 	stw	r18,8(sp)
   225c0:	dc400115 	stw	r17,4(sp)
   225c4:	dfc00515 	stw	ra,20(sp)
   225c8:	2023883a 	mov	r17,r4
   225cc:	3027883a 	mov	r19,r6
   225d0:	3825883a 	mov	r18,r7
   225d4:	28002526 	beq	r5,zero,2266c <__register_exitproc+0xd4>
   225d8:	29000117 	ldw	r4,4(r5)
   225dc:	008007c4 	movi	r2,31
   225e0:	11002716 	blt	r2,r4,22680 <__register_exitproc+0xe8>
   225e4:	8800101e 	bne	r17,zero,22628 <__register_exitproc+0x90>
   225e8:	2105883a 	add	r2,r4,r4
   225ec:	1085883a 	add	r2,r2,r2
   225f0:	20c00044 	addi	r3,r4,1
   225f4:	1145883a 	add	r2,r2,r5
   225f8:	0009883a 	mov	r4,zero
   225fc:	15000215 	stw	r20,8(r2)
   22600:	28c00115 	stw	r3,4(r5)
   22604:	2005883a 	mov	r2,r4
   22608:	dfc00517 	ldw	ra,20(sp)
   2260c:	dd000417 	ldw	r20,16(sp)
   22610:	dcc00317 	ldw	r19,12(sp)
   22614:	dc800217 	ldw	r18,8(sp)
   22618:	dc400117 	ldw	r17,4(sp)
   2261c:	dc000017 	ldw	r16,0(sp)
   22620:	dec00604 	addi	sp,sp,24
   22624:	f800283a 	ret
   22628:	29802204 	addi	r6,r5,136
   2262c:	00800044 	movi	r2,1
   22630:	110e983a 	sll	r7,r2,r4
   22634:	30c04017 	ldw	r3,256(r6)
   22638:	2105883a 	add	r2,r4,r4
   2263c:	1085883a 	add	r2,r2,r2
   22640:	1185883a 	add	r2,r2,r6
   22644:	19c6b03a 	or	r3,r3,r7
   22648:	14802015 	stw	r18,128(r2)
   2264c:	14c00015 	stw	r19,0(r2)
   22650:	00800084 	movi	r2,2
   22654:	30c04015 	stw	r3,256(r6)
   22658:	88bfe31e 	bne	r17,r2,225e8 <__register_exitproc+0x50>
   2265c:	30804117 	ldw	r2,260(r6)
   22660:	11c4b03a 	or	r2,r2,r7
   22664:	30804115 	stw	r2,260(r6)
   22668:	003fdf06 	br	225e8 <__register_exitproc+0x50>
   2266c:	008000b4 	movhi	r2,2
   22670:	10907c04 	addi	r2,r2,16880
   22674:	100b883a 	mov	r5,r2
   22678:	80805215 	stw	r2,328(r16)
   2267c:	003fd606 	br	225d8 <__register_exitproc+0x40>
   22680:	00800034 	movhi	r2,0
   22684:	10800004 	addi	r2,r2,0
   22688:	1000021e 	bne	r2,zero,22694 <__register_exitproc+0xfc>
   2268c:	013fffc4 	movi	r4,-1
   22690:	003fdc06 	br	22604 <__register_exitproc+0x6c>
   22694:	01006404 	movi	r4,400
   22698:	103ee83a 	callr	r2
   2269c:	1007883a 	mov	r3,r2
   226a0:	103ffa26 	beq	r2,zero,2268c <__register_exitproc+0xf4>
   226a4:	80805217 	ldw	r2,328(r16)
   226a8:	180b883a 	mov	r5,r3
   226ac:	18000115 	stw	zero,4(r3)
   226b0:	18800015 	stw	r2,0(r3)
   226b4:	80c05215 	stw	r3,328(r16)
   226b8:	18006215 	stw	zero,392(r3)
   226bc:	18006315 	stw	zero,396(r3)
   226c0:	0009883a 	mov	r4,zero
   226c4:	883fc826 	beq	r17,zero,225e8 <__register_exitproc+0x50>
   226c8:	003fd706 	br	22628 <__register_exitproc+0x90>

000226cc <register_fini>:
   226cc:	f800283a 	ret

000226d0 <__call_exitprocs>:
   226d0:	008000b4 	movhi	r2,2
   226d4:	10902b04 	addi	r2,r2,16556
   226d8:	10800017 	ldw	r2,0(r2)
   226dc:	defff304 	addi	sp,sp,-52
   226e0:	df000b15 	stw	fp,44(sp)
   226e4:	d8800115 	stw	r2,4(sp)
   226e8:	00800034 	movhi	r2,0
   226ec:	10800004 	addi	r2,r2,0
   226f0:	1005003a 	cmpeq	r2,r2,zero
   226f4:	d8800215 	stw	r2,8(sp)
   226f8:	d8800117 	ldw	r2,4(sp)
   226fc:	dd400815 	stw	r21,32(sp)
   22700:	dd000715 	stw	r20,28(sp)
   22704:	10805204 	addi	r2,r2,328
   22708:	dfc00c15 	stw	ra,48(sp)
   2270c:	ddc00a15 	stw	r23,40(sp)
   22710:	dd800915 	stw	r22,36(sp)
   22714:	dcc00615 	stw	r19,24(sp)
   22718:	dc800515 	stw	r18,20(sp)
   2271c:	dc400415 	stw	r17,16(sp)
   22720:	dc000315 	stw	r16,12(sp)
   22724:	282b883a 	mov	r21,r5
   22728:	2039883a 	mov	fp,r4
   2272c:	d8800015 	stw	r2,0(sp)
   22730:	2829003a 	cmpeq	r20,r5,zero
   22734:	d8800117 	ldw	r2,4(sp)
   22738:	14405217 	ldw	r17,328(r2)
   2273c:	88001026 	beq	r17,zero,22780 <__call_exitprocs+0xb0>
   22740:	ddc00017 	ldw	r23,0(sp)
   22744:	88800117 	ldw	r2,4(r17)
   22748:	8c802204 	addi	r18,r17,136
   2274c:	143fffc4 	addi	r16,r2,-1
   22750:	80000916 	blt	r16,zero,22778 <__call_exitprocs+0xa8>
   22754:	05bfffc4 	movi	r22,-1
   22758:	a000151e 	bne	r20,zero,227b0 <__call_exitprocs+0xe0>
   2275c:	8409883a 	add	r4,r16,r16
   22760:	2105883a 	add	r2,r4,r4
   22764:	1485883a 	add	r2,r2,r18
   22768:	10c02017 	ldw	r3,128(r2)
   2276c:	a8c01126 	beq	r21,r3,227b4 <__call_exitprocs+0xe4>
   22770:	843fffc4 	addi	r16,r16,-1
   22774:	85bff81e 	bne	r16,r22,22758 <__call_exitprocs+0x88>
   22778:	d8800217 	ldw	r2,8(sp)
   2277c:	10003126 	beq	r2,zero,22844 <__call_exitprocs+0x174>
   22780:	dfc00c17 	ldw	ra,48(sp)
   22784:	df000b17 	ldw	fp,44(sp)
   22788:	ddc00a17 	ldw	r23,40(sp)
   2278c:	dd800917 	ldw	r22,36(sp)
   22790:	dd400817 	ldw	r21,32(sp)
   22794:	dd000717 	ldw	r20,28(sp)
   22798:	dcc00617 	ldw	r19,24(sp)
   2279c:	dc800517 	ldw	r18,20(sp)
   227a0:	dc400417 	ldw	r17,16(sp)
   227a4:	dc000317 	ldw	r16,12(sp)
   227a8:	dec00d04 	addi	sp,sp,52
   227ac:	f800283a 	ret
   227b0:	8409883a 	add	r4,r16,r16
   227b4:	88c00117 	ldw	r3,4(r17)
   227b8:	2105883a 	add	r2,r4,r4
   227bc:	1445883a 	add	r2,r2,r17
   227c0:	18ffffc4 	addi	r3,r3,-1
   227c4:	11800217 	ldw	r6,8(r2)
   227c8:	1c001526 	beq	r3,r16,22820 <__call_exitprocs+0x150>
   227cc:	10000215 	stw	zero,8(r2)
   227d0:	303fe726 	beq	r6,zero,22770 <__call_exitprocs+0xa0>
   227d4:	00c00044 	movi	r3,1
   227d8:	1c06983a 	sll	r3,r3,r16
   227dc:	90804017 	ldw	r2,256(r18)
   227e0:	8cc00117 	ldw	r19,4(r17)
   227e4:	1884703a 	and	r2,r3,r2
   227e8:	10001426 	beq	r2,zero,2283c <__call_exitprocs+0x16c>
   227ec:	90804117 	ldw	r2,260(r18)
   227f0:	1884703a 	and	r2,r3,r2
   227f4:	10000c1e 	bne	r2,zero,22828 <__call_exitprocs+0x158>
   227f8:	2105883a 	add	r2,r4,r4
   227fc:	1485883a 	add	r2,r2,r18
   22800:	11400017 	ldw	r5,0(r2)
   22804:	e009883a 	mov	r4,fp
   22808:	303ee83a 	callr	r6
   2280c:	88800117 	ldw	r2,4(r17)
   22810:	98bfc81e 	bne	r19,r2,22734 <__call_exitprocs+0x64>
   22814:	b8800017 	ldw	r2,0(r23)
   22818:	147fd526 	beq	r2,r17,22770 <__call_exitprocs+0xa0>
   2281c:	003fc506 	br	22734 <__call_exitprocs+0x64>
   22820:	8c000115 	stw	r16,4(r17)
   22824:	003fea06 	br	227d0 <__call_exitprocs+0x100>
   22828:	2105883a 	add	r2,r4,r4
   2282c:	1485883a 	add	r2,r2,r18
   22830:	11000017 	ldw	r4,0(r2)
   22834:	303ee83a 	callr	r6
   22838:	003ff406 	br	2280c <__call_exitprocs+0x13c>
   2283c:	303ee83a 	callr	r6
   22840:	003ff206 	br	2280c <__call_exitprocs+0x13c>
   22844:	88800117 	ldw	r2,4(r17)
   22848:	1000081e 	bne	r2,zero,2286c <__call_exitprocs+0x19c>
   2284c:	89000017 	ldw	r4,0(r17)
   22850:	20000726 	beq	r4,zero,22870 <__call_exitprocs+0x1a0>
   22854:	b9000015 	stw	r4,0(r23)
   22858:	8809883a 	mov	r4,r17
   2285c:	00000000 	call	0 <__alt_mem_RAM-0x20000>
   22860:	bc400017 	ldw	r17,0(r23)
   22864:	883fb71e 	bne	r17,zero,22744 <__call_exitprocs+0x74>
   22868:	003fc506 	br	22780 <__call_exitprocs+0xb0>
   2286c:	89000017 	ldw	r4,0(r17)
   22870:	882f883a 	mov	r23,r17
   22874:	2023883a 	mov	r17,r4
   22878:	883fb21e 	bne	r17,zero,22744 <__call_exitprocs+0x74>
   2287c:	003fc006 	br	22780 <__call_exitprocs+0xb0>

00022880 <_exit>:
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   22880:	20000226 	beq	r4,zero,2288c <_exit+0xc>
    ALT_SIM_FAIL();
   22884:	002af070 	cmpltui	zero,zero,43969
   22888:	00000106 	br	22890 <_exit+0x10>
  } else {
    ALT_SIM_PASS();
   2288c:	002af0b0 	cmpltui	zero,zero,43970
   22890:	003fff06 	br	22890 <_exit+0x10>
   22894:	000226cc 	andi	zero,zero,2203
